/**
* AMF Location Service
* AMF Location Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * NotifiedUELocation.h
 *
 * 
 */

#ifndef NotifiedUELocation_H_
#define NotifiedUELocation_H_


#include "ModelBase.h"

#include "GnssPositioningMethodAndUsage.h"
#include "Ecgi.h"
#include "Ncgi.h"
#include "CivicAddress.h"
#include "GeographicArea.h"
#include "VelocityEstimate.h"
#include "PositioningMethodAndUsage.h"
#include <string>
#include "LocationEvent.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  NotifiedUELocation
    : public ModelBase
{
public:
    NotifiedUELocation();
    virtual ~NotifiedUELocation();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(const nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// NotifiedUELocation members

    /// <summary>
    /// 
    /// </summary>
    LocationEvent getLocationEvent() const;
    void setLocationEvent(LocationEvent const& value);
        /// <summary>
    /// 
    /// </summary>
    std::string getSupi() const;
    void setSupi(std::string const& value);
    bool supiIsSet() const;
    void unsetSupi();
    /// <summary>
    /// 
    /// </summary>
    std::string getGpsi() const;
    void setGpsi(std::string const& value);
    bool gpsiIsSet() const;
    void unsetGpsi();
    /// <summary>
    /// 
    /// </summary>
    std::string getPei() const;
    void setPei(std::string const& value);
    bool peiIsSet() const;
    void unsetPei();
    /// <summary>
    /// 
    /// </summary>
    GeographicArea getLocationEstimate() const;
    void setLocationEstimate(GeographicArea const& value);
    bool locationEstimateIsSet() const;
    void unsetLocationEstimate();
    /// <summary>
    /// 
    /// </summary>
    int32_t getAgeOfLocationEstimate() const;
    void setAgeOfLocationEstimate(int32_t const value);
    bool ageOfLocationEstimateIsSet() const;
    void unsetAgeOfLocationEstimate();
    /// <summary>
    /// 
    /// </summary>
    VelocityEstimate getVelocityEstimate() const;
    void setVelocityEstimate(VelocityEstimate const& value);
    bool velocityEstimateIsSet() const;
    void unsetVelocityEstimate();
    /// <summary>
    /// 
    /// </summary>
    PositioningMethodAndUsage getPositioningData() const;
    void setPositioningData(PositioningMethodAndUsage const& value);
    bool positioningDataIsSet() const;
    void unsetPositioningData();
    /// <summary>
    /// 
    /// </summary>
    GnssPositioningMethodAndUsage getGnssPositioningData() const;
    void setGnssPositioningData(GnssPositioningMethodAndUsage const& value);
    bool gnssPositioningDataIsSet() const;
    void unsetGnssPositioningData();
    /// <summary>
    /// 
    /// </summary>
    Ecgi getEcgi() const;
    void setEcgi(Ecgi const& value);
    bool ecgiIsSet() const;
    void unsetEcgi();
    /// <summary>
    /// 
    /// </summary>
    Ncgi getNcgi() const;
    void setNcgi(Ncgi const& value);
    bool ncgiIsSet() const;
    void unsetNcgi();
    /// <summary>
    /// 
    /// </summary>
    std::string getServingNode() const;
    void setServingNode(std::string const& value);
    bool servingNodeIsSet() const;
    void unsetServingNode();
    /// <summary>
    /// 
    /// </summary>
    CivicAddress getCivicAddress() const;
    void setCivicAddress(CivicAddress const& value);
    bool civicAddressIsSet() const;
    void unsetCivicAddress();
    /// <summary>
    /// 
    /// </summary>
    int32_t getBarometricPressure() const;
    void setBarometricPressure(int32_t const value);
    bool barometricPressureIsSet() const;
    void unsetBarometricPressure();

protected:
    LocationEvent m_LocationEvent;

    std::string m_Supi;
    bool m_SupiIsSet;
    std::string m_Gpsi;
    bool m_GpsiIsSet;
    std::string m_Pei;
    bool m_PeiIsSet;
    GeographicArea m_LocationEstimate;
    bool m_LocationEstimateIsSet;
    int32_t m_AgeOfLocationEstimate;
    bool m_AgeOfLocationEstimateIsSet;
    VelocityEstimate m_VelocityEstimate;
    bool m_VelocityEstimateIsSet;
    PositioningMethodAndUsage m_PositioningData;
    bool m_PositioningDataIsSet;
    GnssPositioningMethodAndUsage m_GnssPositioningData;
    bool m_GnssPositioningDataIsSet;
    Ecgi m_Ecgi;
    bool m_EcgiIsSet;
    Ncgi m_Ncgi;
    bool m_NcgiIsSet;
    std::string m_ServingNode;
    bool m_ServingNodeIsSet;
    CivicAddress m_CivicAddress;
    bool m_CivicAddressIsSet;
    int32_t m_BarometricPressure;
    bool m_BarometricPressureIsSet;
};

}
}
}
}

#endif /* NotifiedUELocation_H_ */

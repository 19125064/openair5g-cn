/**
* AMF Location Service
* AMF Location Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "EllipsoidArc.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

EllipsoidArc::EllipsoidArc()
{
    m_InnerRadius = 0;
    m_UncertaintyRadius = 0.0f;
    m_OffsetAngle = 0;
    m_IncludedAngle = 0;
    m_Confidence = 0;
    
}

EllipsoidArc::~EllipsoidArc()
{
}

void EllipsoidArc::validate()
{
    // TODO: implement validation
}

nlohmann::json EllipsoidArc::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["shape"] = ModelBase::toJson(m_Shape);
    val["point"] = ModelBase::toJson(m_Point);
    val["innerRadius"] = m_InnerRadius;
    val["uncertaintyRadius"] = m_UncertaintyRadius;
    val["offsetAngle"] = m_OffsetAngle;
    val["includedAngle"] = m_IncludedAngle;
    val["confidence"] = m_Confidence;
    

    return val;
}

void EllipsoidArc::fromJson(const nlohmann::json& val)
{
    setInnerRadius(val.at("innerRadius"));
    setUncertaintyRadius(val.at("uncertaintyRadius"));
    setOffsetAngle(val.at("offsetAngle"));
    setIncludedAngle(val.at("includedAngle"));
    setConfidence(val.at("confidence"));
    
}


SupportedGADShapes EllipsoidArc::getShape() const
{
    return m_Shape;
}
void EllipsoidArc::setShape(SupportedGADShapes const& value)
{
    m_Shape = value;
    
}
GeographicalCoordinates EllipsoidArc::getPoint() const
{
    return m_Point;
}
void EllipsoidArc::setPoint(GeographicalCoordinates const& value)
{
    m_Point = value;
    
}
int32_t EllipsoidArc::getInnerRadius() const
{
    return m_InnerRadius;
}
void EllipsoidArc::setInnerRadius(int32_t const value)
{
    m_InnerRadius = value;
    
}
float EllipsoidArc::getUncertaintyRadius() const
{
    return m_UncertaintyRadius;
}
void EllipsoidArc::setUncertaintyRadius(float const value)
{
    m_UncertaintyRadius = value;
    
}
int32_t EllipsoidArc::getOffsetAngle() const
{
    return m_OffsetAngle;
}
void EllipsoidArc::setOffsetAngle(int32_t const value)
{
    m_OffsetAngle = value;
    
}
int32_t EllipsoidArc::getIncludedAngle() const
{
    return m_IncludedAngle;
}
void EllipsoidArc::setIncludedAngle(int32_t const value)
{
    m_IncludedAngle = value;
    
}
int32_t EllipsoidArc::getConfidence() const
{
    return m_Confidence;
}
void EllipsoidArc::setConfidence(int32_t const value)
{
    m_Confidence = value;
    
}

}
}
}
}


/**
* AMF Location Service
* AMF Location Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PointAltitudeUncertainty.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PointAltitudeUncertainty::PointAltitudeUncertainty()
{
    m_Altitude = 0.0f;
    m_UncertaintyAltitude = 0.0f;
    m_Confidence = 0;
    
}

PointAltitudeUncertainty::~PointAltitudeUncertainty()
{
}

void PointAltitudeUncertainty::validate()
{
    // TODO: implement validation
}

nlohmann::json PointAltitudeUncertainty::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["shape"] = ModelBase::toJson(m_Shape);
    val["point"] = ModelBase::toJson(m_Point);
    val["altitude"] = m_Altitude;
    val["uncertaintyEllipse"] = ModelBase::toJson(m_UncertaintyEllipse);
    val["uncertaintyAltitude"] = m_UncertaintyAltitude;
    val["confidence"] = m_Confidence;
    

    return val;
}

void PointAltitudeUncertainty::fromJson(const nlohmann::json& val)
{
    setAltitude(val.at("altitude"));
    setUncertaintyAltitude(val.at("uncertaintyAltitude"));
    setConfidence(val.at("confidence"));
    
}


SupportedGADShapes PointAltitudeUncertainty::getShape() const
{
    return m_Shape;
}
void PointAltitudeUncertainty::setShape(SupportedGADShapes const& value)
{
    m_Shape = value;
    
}
GeographicalCoordinates PointAltitudeUncertainty::getPoint() const
{
    return m_Point;
}
void PointAltitudeUncertainty::setPoint(GeographicalCoordinates const& value)
{
    m_Point = value;
    
}
float PointAltitudeUncertainty::getAltitude() const
{
    return m_Altitude;
}
void PointAltitudeUncertainty::setAltitude(float const value)
{
    m_Altitude = value;
    
}
UncertaintyEllipse PointAltitudeUncertainty::getUncertaintyEllipse() const
{
    return m_UncertaintyEllipse;
}
void PointAltitudeUncertainty::setUncertaintyEllipse(UncertaintyEllipse const& value)
{
    m_UncertaintyEllipse = value;
    
}
float PointAltitudeUncertainty::getUncertaintyAltitude() const
{
    return m_UncertaintyAltitude;
}
void PointAltitudeUncertainty::setUncertaintyAltitude(float const value)
{
    m_UncertaintyAltitude = value;
    
}
int32_t PointAltitudeUncertainty::getConfidence() const
{
    return m_Confidence;
}
void PointAltitudeUncertainty::setConfidence(int32_t const value)
{
    m_Confidence = value;
    
}

}
}
}
}


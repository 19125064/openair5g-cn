/**
* Namf_EventExposure Service
* AMF Event Exposure Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AmfEventSubscription.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AmfEventSubscription::AmfEventSubscription()
{
    m_EventNotifyUri = "";
    m_NotifyCorrelationId = "";
    m_NfId = "";
    m_SubsChangeNotifyUri = "";
    m_SubsChangeNotifyUriIsSet = false;
    m_Supi = "";
    m_SupiIsSet = false;
    m_GroupId = "";
    m_GroupIdIsSet = false;
    m_Gpsi = "";
    m_GpsiIsSet = false;
    m_Pei = "";
    m_PeiIsSet = false;
    m_AnyUE = false;
    m_AnyUEIsSet = false;
    
}

AmfEventSubscription::~AmfEventSubscription()
{
}

void AmfEventSubscription::validate()
{
    // TODO: implement validation
}

nlohmann::json AmfEventSubscription::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    {
        nlohmann::json jsonArray;
        for( auto& item : m_Events )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["events"] = jsonArray;
        
    }
    val["eventNotifyUri"] = ModelBase::toJson(m_EventNotifyUri);
    val["notifyCorrelationId"] = ModelBase::toJson(m_NotifyCorrelationId);
    val["nfId"] = ModelBase::toJson(m_NfId);
    if(m_SubsChangeNotifyUriIsSet)
    {
        val["subsChangeNotifyUri"] = ModelBase::toJson(m_SubsChangeNotifyUri);
    }
    if(m_SupiIsSet)
    {
        val["supi"] = ModelBase::toJson(m_Supi);
    }
    if(m_GroupIdIsSet)
    {
        val["groupId"] = ModelBase::toJson(m_GroupId);
    }
    if(m_GpsiIsSet)
    {
        val["gpsi"] = ModelBase::toJson(m_Gpsi);
    }
    if(m_PeiIsSet)
    {
        val["pei"] = ModelBase::toJson(m_Pei);
    }
    if(m_AnyUEIsSet)
    {
        val["anyUE"] = m_AnyUE;
    }
    

    return val;
}

void AmfEventSubscription::fromJson(const nlohmann::json& val)
{
    {
        m_Events.clear();
                    for( auto& item : val["events"] )
            {
                
                if(item.is_null())
                {
                    m_Events.push_back( AmfEvent() );
                }
                else
                {
                    AmfEvent newItem;
                    newItem.fromJson(item);
                    m_Events.push_back( newItem );
                }
                
            }
    }
    setEventNotifyUri(val.at("eventNotifyUri"));
    setNotifyCorrelationId(val.at("notifyCorrelationId"));
    setNfId(val.at("nfId"));
    if(val.find("subsChangeNotifyUri") != val.end())
    {
        setSubsChangeNotifyUri(val.at("subsChangeNotifyUri"));
    }
    if(val.find("supi") != val.end())
    {
        setSupi(val.at("supi"));
    }
    if(val.find("groupId") != val.end())
    {
        setGroupId(val.at("groupId"));
    }
    if(val.find("gpsi") != val.end())
    {
        setGpsi(val.at("gpsi"));
    }
    if(val.find("pei") != val.end())
    {
        setPei(val.at("pei"));
    }
    if(val.find("anyUE") != val.end())
    {
        setAnyUE(val.at("anyUE"));
    }
    
}


std::vector<AmfEvent>& AmfEventSubscription::getEvents()
{
    return m_Events;
}
std::string AmfEventSubscription::getEventNotifyUri() const
{
    return m_EventNotifyUri;
}
void AmfEventSubscription::setEventNotifyUri(std::string const& value)
{
    m_EventNotifyUri = value;
    
}
std::string AmfEventSubscription::getNotifyCorrelationId() const
{
    return m_NotifyCorrelationId;
}
void AmfEventSubscription::setNotifyCorrelationId(std::string const& value)
{
    m_NotifyCorrelationId = value;
    
}
std::string AmfEventSubscription::getNfId() const
{
    return m_NfId;
}
void AmfEventSubscription::setNfId(std::string const& value)
{
    m_NfId = value;
    
}
std::string AmfEventSubscription::getSubsChangeNotifyUri() const
{
    return m_SubsChangeNotifyUri;
}
void AmfEventSubscription::setSubsChangeNotifyUri(std::string const& value)
{
    m_SubsChangeNotifyUri = value;
    m_SubsChangeNotifyUriIsSet = true;
}
bool AmfEventSubscription::subsChangeNotifyUriIsSet() const
{
    return m_SubsChangeNotifyUriIsSet;
}
void AmfEventSubscription::unsetSubsChangeNotifyUri()
{
    m_SubsChangeNotifyUriIsSet = false;
}
std::string AmfEventSubscription::getSupi() const
{
    return m_Supi;
}
void AmfEventSubscription::setSupi(std::string const& value)
{
    m_Supi = value;
    m_SupiIsSet = true;
}
bool AmfEventSubscription::supiIsSet() const
{
    return m_SupiIsSet;
}
void AmfEventSubscription::unsetSupi()
{
    m_SupiIsSet = false;
}
std::string AmfEventSubscription::getGroupId() const
{
    return m_GroupId;
}
void AmfEventSubscription::setGroupId(std::string const& value)
{
    m_GroupId = value;
    m_GroupIdIsSet = true;
}
bool AmfEventSubscription::groupIdIsSet() const
{
    return m_GroupIdIsSet;
}
void AmfEventSubscription::unsetGroupId()
{
    m_GroupIdIsSet = false;
}
std::string AmfEventSubscription::getGpsi() const
{
    return m_Gpsi;
}
void AmfEventSubscription::setGpsi(std::string const& value)
{
    m_Gpsi = value;
    m_GpsiIsSet = true;
}
bool AmfEventSubscription::gpsiIsSet() const
{
    return m_GpsiIsSet;
}
void AmfEventSubscription::unsetGpsi()
{
    m_GpsiIsSet = false;
}
std::string AmfEventSubscription::getPei() const
{
    return m_Pei;
}
void AmfEventSubscription::setPei(std::string const& value)
{
    m_Pei = value;
    m_PeiIsSet = true;
}
bool AmfEventSubscription::peiIsSet() const
{
    return m_PeiIsSet;
}
void AmfEventSubscription::unsetPei()
{
    m_PeiIsSet = false;
}
bool AmfEventSubscription::isAnyUE() const
{
    return m_AnyUE;
}
void AmfEventSubscription::setAnyUE(bool const value)
{
    m_AnyUE = value;
    m_AnyUEIsSet = true;
}
bool AmfEventSubscription::anyUEIsSet() const
{
    return m_AnyUEIsSet;
}
void AmfEventSubscription::unsetAnyUE()
{
    m_AnyUEIsSet = false;
}

}
}
}
}


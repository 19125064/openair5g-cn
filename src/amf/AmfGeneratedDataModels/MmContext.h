/**
* AMF Communicaiton Service
* AMF Communication Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * MmContext.h
 *
 * 
 */

#ifndef MmContext_H_
#define MmContext_H_


#include "ModelBase.h"

#include "NssaiMapping.h"
#include <string>
#include "Snssai_2.h"
#include "NasSecurityMode.h"
#include <vector>
#include "AccessType.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  MmContext
    : public ModelBase
{
public:
    MmContext();
    virtual ~MmContext();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(const nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// MmContext members

    /// <summary>
    /// 
    /// </summary>
    AccessType getAccessType() const;
    void setAccessType(AccessType const& value);
        /// <summary>
    /// 
    /// </summary>
    NasSecurityMode getNasSecurityMode() const;
    void setNasSecurityMode(NasSecurityMode const& value);
    bool nasSecurityModeIsSet() const;
    void unsetNasSecurityMode();
    /// <summary>
    /// 
    /// </summary>
    int32_t getNasDownlinkCount() const;
    void setNasDownlinkCount(int32_t const value);
    bool nasDownlinkCountIsSet() const;
    void unsetNasDownlinkCount();
    /// <summary>
    /// 
    /// </summary>
    int32_t getNasUplinkCount() const;
    void setNasUplinkCount(int32_t const value);
    bool nasUplinkCountIsSet() const;
    void unsetNasUplinkCount();
    /// <summary>
    /// 
    /// </summary>
    std::string get5gmmCapability() const;
    void set5gmmCapability(std::string const& value);
    bool _5gmmCapabilityIsSet() const;
    void unset_5gmmCapability();
    /// <summary>
    /// 
    /// </summary>
    std::string getUeSecurityCapability() const;
    void setUeSecurityCapability(std::string const& value);
    bool ueSecurityCapabilityIsSet() const;
    void unsetUeSecurityCapability();
    /// <summary>
    /// 
    /// </summary>
    std::string getS1UeNetworkCapability() const;
    void setS1UeNetworkCapability(std::string const& value);
    bool s1UeNetworkCapabilityIsSet() const;
    void unsetS1UeNetworkCapability();
    /// <summary>
    /// 
    /// </summary>
    std::vector<Snssai_2>& getAllowedNssai();
    bool allowedNssaiIsSet() const;
    void unsetAllowedNssai();
    /// <summary>
    /// 
    /// </summary>
    std::vector<NssaiMapping>& getNssaiMapping();
    bool nssaiMappingIsSet() const;
    void unsetNssaiMapping();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string>& getNsInstances();
    bool nsInstancesIsSet() const;
    void unsetNsInstances();

protected:
    AccessType m_AccessType;

    NasSecurityMode m_NasSecurityMode;
    bool m_NasSecurityModeIsSet;
    int32_t m_NasDownlinkCount;
    bool m_NasDownlinkCountIsSet;
    int32_t m_NasUplinkCount;
    bool m_NasUplinkCountIsSet;
    std::string m__5gmmCapability;
    bool m__5gmmCapabilityIsSet;
    std::string m_UeSecurityCapability;
    bool m_UeSecurityCapabilityIsSet;
    std::string m_S1UeNetworkCapability;
    bool m_S1UeNetworkCapabilityIsSet;
    std::vector<Snssai_2> m_AllowedNssai;
    bool m_AllowedNssaiIsSet;
    std::vector<NssaiMapping> m_NssaiMapping;
    bool m_NssaiMappingIsSet;
    std::vector<std::string> m_NsInstances;
    bool m_NsInstancesIsSet;
};

}
}
}
}

#endif /* MmContext_H_ */

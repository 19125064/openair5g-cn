/**
* AMF Location Service
* AMF Location Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GeographicArea.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

GeographicArea::GeographicArea()
{
    m_Uncertainty = 0.0f;
    m_Confidence = 0;
    m_Altitude = 0.0f;
    m_UncertaintyAltitude = 0.0f;
    m_InnerRadius = 0;
    m_UncertaintyRadius = 0.0f;
    m_OffsetAngle = 0;
    m_IncludedAngle = 0;
    
}

GeographicArea::~GeographicArea()
{
}

void GeographicArea::validate()
{
    // TODO: implement validation
}

nlohmann::json GeographicArea::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["shape"] = ModelBase::toJson(m_Shape);
    val["point"] = ModelBase::toJson(m_Point);
    val["uncertainty"] = m_Uncertainty;
    val["uncertaintyEllipse"] = ModelBase::toJson(m_UncertaintyEllipse);
    val["confidence"] = m_Confidence;
    {
        nlohmann::json jsonArray;
        for( auto& item : m_PointList )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["pointList"] = jsonArray;
        
    }
    val["altitude"] = m_Altitude;
    val["uncertaintyAltitude"] = m_UncertaintyAltitude;
    val["innerRadius"] = m_InnerRadius;
    val["uncertaintyRadius"] = m_UncertaintyRadius;
    val["offsetAngle"] = m_OffsetAngle;
    val["includedAngle"] = m_IncludedAngle;
    

    return val;
}

void GeographicArea::fromJson(const nlohmann::json& val)
{
    setUncertainty(val.at("uncertainty"));
    setConfidence(val.at("confidence"));
    {
        m_PointList.clear();
                    for( auto& item : val["pointList"] )
            {
                
                if(item.is_null())
                {
                    m_PointList.push_back( GeographicalCoordinates() );
                }
                else
                {
                    GeographicalCoordinates newItem;
                    newItem.fromJson(item);
                    m_PointList.push_back( newItem );
                }
                
            }
    }
    setAltitude(val.at("altitude"));
    setUncertaintyAltitude(val.at("uncertaintyAltitude"));
    setInnerRadius(val.at("innerRadius"));
    setUncertaintyRadius(val.at("uncertaintyRadius"));
    setOffsetAngle(val.at("offsetAngle"));
    setIncludedAngle(val.at("includedAngle"));
    
}


SupportedGADShapes GeographicArea::getShape() const
{
    return m_Shape;
}
void GeographicArea::setShape(SupportedGADShapes const& value)
{
    m_Shape = value;
    
}
GeographicalCoordinates GeographicArea::getPoint() const
{
    return m_Point;
}
void GeographicArea::setPoint(GeographicalCoordinates const& value)
{
    m_Point = value;
    
}
float GeographicArea::getUncertainty() const
{
    return m_Uncertainty;
}
void GeographicArea::setUncertainty(float const value)
{
    m_Uncertainty = value;
    
}
UncertaintyEllipse GeographicArea::getUncertaintyEllipse() const
{
    return m_UncertaintyEllipse;
}
void GeographicArea::setUncertaintyEllipse(UncertaintyEllipse const& value)
{
    m_UncertaintyEllipse = value;
    
}
int32_t GeographicArea::getConfidence() const
{
    return m_Confidence;
}
void GeographicArea::setConfidence(int32_t const value)
{
    m_Confidence = value;
    
}
std::vector<GeographicalCoordinates>& GeographicArea::getPointList()
{
    return m_PointList;
}
float GeographicArea::getAltitude() const
{
    return m_Altitude;
}
void GeographicArea::setAltitude(float const value)
{
    m_Altitude = value;
    
}
float GeographicArea::getUncertaintyAltitude() const
{
    return m_UncertaintyAltitude;
}
void GeographicArea::setUncertaintyAltitude(float const value)
{
    m_UncertaintyAltitude = value;
    
}
int32_t GeographicArea::getInnerRadius() const
{
    return m_InnerRadius;
}
void GeographicArea::setInnerRadius(int32_t const value)
{
    m_InnerRadius = value;
    
}
float GeographicArea::getUncertaintyRadius() const
{
    return m_UncertaintyRadius;
}
void GeographicArea::setUncertaintyRadius(float const value)
{
    m_UncertaintyRadius = value;
    
}
int32_t GeographicArea::getOffsetAngle() const
{
    return m_OffsetAngle;
}
void GeographicArea::setOffsetAngle(int32_t const value)
{
    m_OffsetAngle = value;
    
}
int32_t GeographicArea::getIncludedAngle() const
{
    return m_IncludedAngle;
}
void GeographicArea::setIncludedAngle(int32_t const value)
{
    m_IncludedAngle = value;
    
}

}
}
}
}


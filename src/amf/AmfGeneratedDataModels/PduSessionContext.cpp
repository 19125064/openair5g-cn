/**
* AMF Communicaiton Service
* AMF Communication Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PduSessionContext.h"
#include <iostream>

namespace org {
namespace openapitools {
namespace server {
namespace model {

PduSessionContext::PduSessionContext()
{
    m_PduSessionId = 0;
    m_SmContextRef = "";
    m_Dnn = "";
    m_HsmfId = "";
    m_HsmfIdIsSet = false;
    m_VsmfId = "";
    m_VsmfIdIsSet = false;
    m_NsInstance = "";
    m_NsInstanceIsSet = false;
    
}

PduSessionContext::~PduSessionContext()
{
}

void PduSessionContext::validate()
{
    // TODO: implement validation
}

nlohmann::json PduSessionContext::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["pduSessionId"] = m_PduSessionId;
    val["smContextRef"] = ModelBase::toJson(m_SmContextRef);
    val["sNssai"] = ModelBase::toJson(m_SNssai);
    val["dnn"] = ModelBase::toJson(m_Dnn);
    val["accessType"] = ModelBase::toJson(m_AccessType);
    {
        nlohmann::json jsonArray;
        for( auto& item : m_AllocatedEbiList )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["allocatedEbiList"] = jsonArray;
        
    }
    if(m_HsmfIdIsSet)
    {
        val["hsmfId"] = ModelBase::toJson(m_HsmfId);
    }
    if(m_VsmfIdIsSet)
    {
        val["vsmfId"] = ModelBase::toJson(m_VsmfId);
    }
    if(m_NsInstanceIsSet)
    {
        val["nsInstance"] = ModelBase::toJson(m_NsInstance);
    }
    

    return val;
}

void PduSessionContext::fromJson(const nlohmann::json& val)
{
    setPduSessionId(val.at("pduSessionId"));
    setSmContextRef(val.at("smContextRef"));
    setDnn(val.at("dnn"));
    {
        m_AllocatedEbiList.clear();
        for( auto& item : val["allocatedEbiList"] )
        {

            if(item.is_null())
            {
                m_AllocatedEbiList.push_back( EbiArpMapping() );
            }
            else
            {
                EbiArpMapping newItem;
                newItem.fromJson(item);
                m_AllocatedEbiList.push_back( newItem );
            }

        }
    }
    if(val.find("hsmfId") != val.end())
    {
        setHsmfId(val.at("hsmfId"));
    }
    if(val.find("vsmfId") != val.end())
    {
        setVsmfId(val.at("vsmfId"));
    }
    if(val.find("nsInstance") != val.end())
    {
        setNsInstance(val.at("nsInstance"));
    }
    
}


int32_t PduSessionContext::getPduSessionId() const
{
    return m_PduSessionId;
}
void PduSessionContext::setPduSessionId(int32_t const value)
{
    m_PduSessionId = value;
    
}
std::string PduSessionContext::getSmContextRef() const
{
    return m_SmContextRef;
}
void PduSessionContext::setSmContextRef(std::string const& value)
{
    m_SmContextRef = value;
    
}
Snssai_2 PduSessionContext::getSNssai() const
{
    return m_SNssai;
}
void PduSessionContext::setSNssai(Snssai_2 const& value)
{
    m_SNssai = value;
    
}
std::string PduSessionContext::getDnn() const
{
    return m_Dnn;
}
void PduSessionContext::setDnn(std::string const& value)
{
    m_Dnn = value;
    
}
AccessType PduSessionContext::getAccessType() const
{
    return m_AccessType;
}
void PduSessionContext::setAccessType(AccessType const& value)
{
    m_AccessType = value;
    
}
std::vector<EbiArpMapping>& PduSessionContext::getAllocatedEbiList()
{
    return m_AllocatedEbiList;
}
std::string PduSessionContext::getHsmfId() const
{
    return m_HsmfId;
}
void PduSessionContext::setHsmfId(std::string const& value)
{
    m_HsmfId = value;
    m_HsmfIdIsSet = true;
}
bool PduSessionContext::hsmfIdIsSet() const
{
    return m_HsmfIdIsSet;
}
void PduSessionContext::unsetHsmfId()
{
    m_HsmfIdIsSet = false;
}
std::string PduSessionContext::getVsmfId() const
{
    return m_VsmfId;
}
void PduSessionContext::setVsmfId(std::string const& value)
{
    m_VsmfId = value;
    m_VsmfIdIsSet = true;
}
bool PduSessionContext::vsmfIdIsSet() const
{
    return m_VsmfIdIsSet;
}
void PduSessionContext::unsetVsmfId()
{
    m_VsmfIdIsSet = false;
}
std::string PduSessionContext::getNsInstance() const
{
    return m_NsInstance;
}
void PduSessionContext::setNsInstance(std::string const& value)
{
    m_NsInstance = value;
    m_NsInstanceIsSet = true;
}
bool PduSessionContext::nsInstanceIsSet() const
{
    return m_NsInstanceIsSet;
}
void PduSessionContext::unsetNsInstance()
{
    m_NsInstanceIsSet = false;
}

}
}
}
}


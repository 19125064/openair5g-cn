/**
* Namf_EventExposure Service
* AMF Event Exposure Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * NrLocation.h
 *
 * 
 */

#ifndef NrLocation_H_
#define NrLocation_H_


#include "ModelBase.h"

#include "Ncgi.h"
#include "Tai.h"
#include <string>
#include "GlobalRanNodeId.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  NrLocation
    : public ModelBase
{
public:
    NrLocation();
    virtual ~NrLocation();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(const nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// NrLocation members

    /// <summary>
    /// 
    /// </summary>
    Tai getTai() const;
    void setTai(Tai const& value);
        /// <summary>
    /// 
    /// </summary>
    Ncgi getNcgi() const;
    void setNcgi(Ncgi const& value);
        /// <summary>
    /// 
    /// </summary>
    int32_t getAgeOfLocationInformation() const;
    void setAgeOfLocationInformation(int32_t const value);
    bool ageOfLocationInformationIsSet() const;
    void unsetAgeOfLocationInformation();
    /// <summary>
    /// 
    /// </summary>
    std::string getUeLocationTimestamp() const;
    void setUeLocationTimestamp(std::string const& value);
    bool ueLocationTimestampIsSet() const;
    void unsetUeLocationTimestamp();
    /// <summary>
    /// 
    /// </summary>
    std::string getGeographicalInformation() const;
    void setGeographicalInformation(std::string const& value);
    bool geographicalInformationIsSet() const;
    void unsetGeographicalInformation();
    /// <summary>
    /// 
    /// </summary>
    std::string getGeodeticInformation() const;
    void setGeodeticInformation(std::string const& value);
    bool geodeticInformationIsSet() const;
    void unsetGeodeticInformation();
    /// <summary>
    /// 
    /// </summary>
    GlobalRanNodeId getGlobalGnbId() const;
    void setGlobalGnbId(GlobalRanNodeId const& value);
    bool globalGnbIdIsSet() const;
    void unsetGlobalGnbId();

protected:
    Tai m_Tai;

    Ncgi m_Ncgi;

    int32_t m_AgeOfLocationInformation;
    bool m_AgeOfLocationInformationIsSet;
    std::string m_UeLocationTimestamp;
    bool m_UeLocationTimestampIsSet;
    std::string m_GeographicalInformation;
    bool m_GeographicalInformationIsSet;
    std::string m_GeodeticInformation;
    bool m_GeodeticInformationIsSet;
    GlobalRanNodeId m_GlobalGnbId;
    bool m_GlobalGnbIdIsSet;
};

}
}
}
}

#endif /* NrLocation_H_ */

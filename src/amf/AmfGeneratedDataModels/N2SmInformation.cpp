/**
* AMF Communicaiton Service
* AMF Communication Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "N2SmInformation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

N2SmInformation::N2SmInformation()
{
    m_PduSessionId = 0;
    m_N2InfoContentIsSet = false;
    m_NasPduIsSet = false;
    m_SNssaiIsSet = false;
    m_SubjectToHo = false;
    m_SubjectToHoIsSet = false;
    
}

N2SmInformation::~N2SmInformation()
{
}

void N2SmInformation::validate()
{
    // TODO: implement validation
}

nlohmann::json N2SmInformation::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["pduSessionId"] = m_PduSessionId;
    if(m_N2InfoContentIsSet)
    {
        val["n2InfoContent"] = ModelBase::toJson(m_N2InfoContent);
    }
    if(m_NasPduIsSet)
    {
        val["nasPdu"] = ModelBase::toJson(m_NasPdu);
    }
    if(m_SNssaiIsSet)
    {
        val["sNssai"] = ModelBase::toJson(m_SNssai);
    }
    if(m_SubjectToHoIsSet)
    {
        val["subjectToHo"] = m_SubjectToHo;
    }
    

    return val;
}

void N2SmInformation::fromJson(const nlohmann::json& val)
{
    setPduSessionId(val.at("pduSessionId"));
    if(val.find("n2InfoContent") != val.end())
    {
        if(!val["n2InfoContent"].is_null())
        {
            N2InfoContent newItem;
            newItem.fromJson(val["n2InfoContent"]);
            setN2InfoContent( newItem );
        }
        
    }
    if(val.find("nasPdu") != val.end())
    {
        if(!val["nasPdu"].is_null())
        {
            N1MessageContainer newItem;
            newItem.fromJson(val["nasPdu"]);
            setNasPdu( newItem );
        }
        
    }
    if(val.find("sNssai") != val.end())
    {
        if(!val["sNssai"].is_null())
        {
            Snssai_2 newItem;
            newItem.fromJson(val["sNssai"]);
            setSNssai( newItem );
        }
        
    }
    if(val.find("subjectToHo") != val.end())
    {
        setSubjectToHo(val.at("subjectToHo"));
    }
    
}


int32_t N2SmInformation::getPduSessionId() const
{
    return m_PduSessionId;
}
void N2SmInformation::setPduSessionId(int32_t const value)
{
    m_PduSessionId = value;
    
}
N2InfoContent N2SmInformation::getN2InfoContent() const
{
    return m_N2InfoContent;
}
void N2SmInformation::setN2InfoContent(N2InfoContent const& value)
{
    m_N2InfoContent = value;
    m_N2InfoContentIsSet = true;
}
bool N2SmInformation::n2InfoContentIsSet() const
{
    return m_N2InfoContentIsSet;
}
void N2SmInformation::unsetN2InfoContent()
{
    m_N2InfoContentIsSet = false;
}
N1MessageContainer N2SmInformation::getNasPdu() const
{
    return m_NasPdu;
}
void N2SmInformation::setNasPdu(N1MessageContainer const& value)
{
    m_NasPdu = value;
    m_NasPduIsSet = true;
}
bool N2SmInformation::nasPduIsSet() const
{
    return m_NasPduIsSet;
}
void N2SmInformation::unsetNasPdu()
{
    m_NasPduIsSet = false;
}
Snssai_2 N2SmInformation::getSNssai() const
{
    return m_SNssai;
}
void N2SmInformation::setSNssai(Snssai_2 const& value)
{
    m_SNssai = value;
    m_SNssaiIsSet = true;
}
bool N2SmInformation::sNssaiIsSet() const
{
    return m_SNssaiIsSet;
}
void N2SmInformation::unsetSNssai()
{
    m_SNssaiIsSet = false;
}
bool N2SmInformation::isSubjectToHo() const
{
    return m_SubjectToHo;
}
void N2SmInformation::setSubjectToHo(bool const value)
{
    m_SubjectToHo = value;
    m_SubjectToHoIsSet = true;
}
bool N2SmInformation::subjectToHoIsSet() const
{
    return m_SubjectToHoIsSet;
}
void N2SmInformation::unsetSubjectToHo()
{
    m_SubjectToHoIsSet = false;
}

}
}
}
}


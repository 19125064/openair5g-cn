/**
* AMF Communicaiton Service
* AMF Communication Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * N1N2MessageData.h
 *
 * 
 */

#ifndef N1N2MessageData_H_
#define N1N2MessageData_H_


#include "ModelBase.h"

#include "N1MessageContainer.h"
#include <string>
#include "N2InfoContainer.h"
#include "AccessType.h"
#include "Arp.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  N1N2MessageData
    : public ModelBase
{
public:
    N1N2MessageData();
    virtual ~N1N2MessageData();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(const nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// N1N2MessageData members

    /// <summary>
    /// 
    /// </summary>
    N1MessageContainer getN1MessageContainer() const;
    void setN1MessageContainer(N1MessageContainer const& value);
    bool n1MessageContainerIsSet() const;
    void unsetN1MessageContainer();
    /// <summary>
    /// 
    /// </summary>
    N2InfoContainer getN2InfoContainer() const;
    void setN2InfoContainer(N2InfoContainer const& value);
    bool n2InfoContainerIsSet() const;
    void unsetN2InfoContainer();
    /// <summary>
    /// 
    /// </summary>
    bool isLastMsgIndication() const;
    void setLastMsgIndication(bool const value);
    bool lastMsgIndicationIsSet() const;
    void unsetLastMsgIndication();
    /// <summary>
    /// 
    /// </summary>
    std::string getSessionId() const;
    void setSessionId(std::string const& value);
    bool sessionIdIsSet() const;
    void unsetSessionId();
    /// <summary>
    /// 
    /// </summary>
    AccessType getAnType() const;
    void setAnType(AccessType const& value);
    bool anTypeIsSet() const;
    void unsetAnType();
    /// <summary>
    /// 
    /// </summary>
    int32_t getPpi() const;
    void setPpi(int32_t const value);
    bool ppiIsSet() const;
    void unsetPpi();
    /// <summary>
    /// 
    /// </summary>
    Arp getArp() const;
    void setArp(Arp const& value);
    bool arpIsSet() const;
    void unsetArp();
    /// <summary>
    /// 
    /// </summary>
    int32_t get5qi() const;
    void set5qi(int32_t const value);
    bool _5qiIsSet() const;
    void unset_5qi();
    /// <summary>
    /// 
    /// </summary>
    std::string getN1n2FailureTxfNotifURI() const;
    void setN1n2FailureTxfNotifURI(std::string const& value);
    bool n1n2FailureTxfNotifURIIsSet() const;
    void unsetN1n2FailureTxfNotifURI();
    /// <summary>
    /// 
    /// </summary>
    std::string getSupportedFeatures() const;
    void setSupportedFeatures(std::string const& value);
    bool supportedFeaturesIsSet() const;
    void unsetSupportedFeatures();

protected:
    N1MessageContainer m_N1MessageContainer;
    bool m_N1MessageContainerIsSet;
    N2InfoContainer m_N2InfoContainer;
    bool m_N2InfoContainerIsSet;
    bool m_LastMsgIndication;
    bool m_LastMsgIndicationIsSet;
    std::string m_SessionId;
    bool m_SessionIdIsSet;
    AccessType m_AnType;
    bool m_AnTypeIsSet;
    int32_t m_Ppi;
    bool m_PpiIsSet;
    Arp m_Arp;
    bool m_ArpIsSet;
    int32_t m__5qi;
    bool m__5qiIsSet;
    std::string m_N1n2FailureTxfNotifURI;
    bool m_N1n2FailureTxfNotifURIIsSet;
    std::string m_SupportedFeatures;
    bool m_SupportedFeaturesIsSet;
};

}
}
}
}

#endif /* N1N2MessageData_H_ */

/**
* AMF Location Service
* AMF Location Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * RequestUELocation.h
 *
 * 
 */

#ifndef RequestUELocation_H_
#define RequestUELocation_H_


#include "ModelBase.h"

#include "LcsPriority.h"
#include "LocationType.h"
#include <string>
#include "ExternalClientType.h"
#include "LocationQoS.h"
#include "VelocityRequested.h"
#include "SupportedGADShapes.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  RequestUELocation
    : public ModelBase
{
public:
    RequestUELocation();
    virtual ~RequestUELocation();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(const nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// RequestUELocation members

    /// <summary>
    /// 
    /// </summary>
    ExternalClientType getLcsClientType() const;
    void setLcsClientType(ExternalClientType const& value);
        /// <summary>
    /// 
    /// </summary>
    LocationType getLcsLocation() const;
    void setLcsLocation(LocationType const& value);
        /// <summary>
    /// 
    /// </summary>
    std::string getSupi() const;
    void setSupi(std::string const& value);
    bool supiIsSet() const;
    void unsetSupi();
    /// <summary>
    /// 
    /// </summary>
    std::string getGpsi() const;
    void setGpsi(std::string const& value);
    bool gpsiIsSet() const;
    void unsetGpsi();
    /// <summary>
    /// 
    /// </summary>
    LcsPriority getPriority() const;
    void setPriority(LcsPriority const& value);
    bool priorityIsSet() const;
    void unsetPriority();
    /// <summary>
    /// 
    /// </summary>
    LocationQoS getLcsQoS() const;
    void setLcsQoS(LocationQoS const& value);
    bool lcsQoSIsSet() const;
    void unsetLcsQoS();
    /// <summary>
    /// 
    /// </summary>
    VelocityRequested getVelocityRequested() const;
    void setVelocityRequested(VelocityRequested const& value);
    bool velocityRequestedIsSet() const;
    void unsetVelocityRequested();
    /// <summary>
    /// 
    /// </summary>
    SupportedGADShapes getLcsSupportedGADShapes() const;
    void setLcsSupportedGADShapes(SupportedGADShapes const& value);
    bool lcsSupportedGADShapesIsSet() const;
    void unsetLcsSupportedGADShapes();
    /// <summary>
    /// 
    /// </summary>
    std::string getLocationNotificationUri() const;
    void setLocationNotificationUri(std::string const& value);
    bool locationNotificationUriIsSet() const;
    void unsetLocationNotificationUri();
    /// <summary>
    /// 
    /// </summary>
    std::string getSupportedFeatures() const;
    void setSupportedFeatures(std::string const& value);
    bool supportedFeaturesIsSet() const;
    void unsetSupportedFeatures();

protected:
    ExternalClientType m_LcsClientType;

    LocationType m_LcsLocation;

    std::string m_Supi;
    bool m_SupiIsSet;
    std::string m_Gpsi;
    bool m_GpsiIsSet;
    LcsPriority m_Priority;
    bool m_PriorityIsSet;
    LocationQoS m_LcsQoS;
    bool m_LcsQoSIsSet;
    VelocityRequested m_VelocityRequested;
    bool m_VelocityRequestedIsSet;
    SupportedGADShapes m_LcsSupportedGADShapes;
    bool m_LcsSupportedGADShapesIsSet;
    std::string m_LocationNotificationUri;
    bool m_LocationNotificationUriIsSet;
    std::string m_SupportedFeatures;
    bool m_SupportedFeaturesIsSet;
};

}
}
}
}

#endif /* RequestUELocation_H_ */

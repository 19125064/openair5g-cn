/**
* Namf_EventExposure Service
* AMF Event Exposure Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AmfEventReport.h
 *
 * 
 */

#ifndef AmfEventReport_H_
#define AmfEventReport_H_


#include "ModelBase.h"

#include "RmInfo.h"
#include "UeReachability.h"
#include "AmfEventState.h"
#include "AmfEventArea.h"
#include <string>
#include "UserLocation.h"
#include "SubscribedData.h"
#include <vector>
#include "AccessType.h"
#include "AmfEventType.h"
#include "CmInfo.h"
#include "CommunicationFailure.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AmfEventReport
    : public ModelBase
{
public:
    AmfEventReport();
    virtual ~AmfEventReport();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(const nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// AmfEventReport members

    /// <summary>
    /// 
    /// </summary>
    AmfEventType getType() const;
    void setType(AmfEventType const& value);
        /// <summary>
    /// 
    /// </summary>
    AmfEventState getState() const;
    void setState(AmfEventState const& value);
        /// <summary>
    /// 
    /// </summary>
    bool isAnyUe() const;
    void setAnyUe(bool const value);
    bool anyUeIsSet() const;
    void unsetAnyUe();
    /// <summary>
    /// 
    /// </summary>
    std::string getSupi() const;
    void setSupi(std::string const& value);
    bool supiIsSet() const;
    void unsetSupi();
    /// <summary>
    /// 
    /// </summary>
    std::vector<AmfEventArea>& getArea();
    bool areaIsSet() const;
    void unsetArea();
    /// <summary>
    /// 
    /// </summary>
    std::string getGpsi() const;
    void setGpsi(std::string const& value);
    bool gpsiIsSet() const;
    void unsetGpsi();
    /// <summary>
    /// 
    /// </summary>
    std::string getPei() const;
    void setPei(std::string const& value);
    bool peiIsSet() const;
    void unsetPei();
    /// <summary>
    /// 
    /// </summary>
    UserLocation getLocation() const;
    void setLocation(UserLocation const& value);
    bool locationIsSet() const;
    void unsetLocation();
    /// <summary>
    /// 
    /// </summary>
    std::string getTimezone() const;
    void setTimezone(std::string const& value);
    bool timezoneIsSet() const;
    void unsetTimezone();
    /// <summary>
    /// 
    /// </summary>
    AccessType getAccessTypes() const;
    void setAccessTypes(AccessType const& value);
    bool accessTypesIsSet() const;
    void unsetAccessTypes();
    /// <summary>
    /// 
    /// </summary>
    RmInfo getRmInfos() const;
    void setRmInfos(RmInfo const& value);
    bool rmInfosIsSet() const;
    void unsetRmInfos();
    /// <summary>
    /// 
    /// </summary>
    CmInfo getCmInfos() const;
    void setCmInfos(CmInfo const& value);
    bool cmInfosIsSet() const;
    void unsetCmInfos();
    /// <summary>
    /// 
    /// </summary>
    UeReachability getReachability() const;
    void setReachability(UeReachability const& value);
    bool reachabilityIsSet() const;
    void unsetReachability();
    /// <summary>
    /// 
    /// </summary>
    SubscribedData getSubscribedData() const;
    void setSubscribedData(SubscribedData const& value);
    bool subscribedDataIsSet() const;
    void unsetSubscribedData();
    /// <summary>
    /// 
    /// </summary>
    CommunicationFailure getCommFailure() const;
    void setCommFailure(CommunicationFailure const& value);
    bool commFailureIsSet() const;
    void unsetCommFailure();
    /// <summary>
    /// 
    /// </summary>
    int32_t getNumberOfUes() const;
    void setNumberOfUes(int32_t const value);
    bool numberOfUesIsSet() const;
    void unsetNumberOfUes();

protected:
    AmfEventType m_Type;

    AmfEventState m_State;

    bool m_AnyUe;
    bool m_AnyUeIsSet;
    std::string m_Supi;
    bool m_SupiIsSet;
    std::vector<AmfEventArea> m_Area;
    bool m_AreaIsSet;
    std::string m_Gpsi;
    bool m_GpsiIsSet;
    std::string m_Pei;
    bool m_PeiIsSet;
    UserLocation m_Location;
    bool m_LocationIsSet;
    std::string m_Timezone;
    bool m_TimezoneIsSet;
    AccessType m_AccessTypes;
    bool m_AccessTypesIsSet;
    RmInfo m_RmInfos;
    bool m_RmInfosIsSet;
    CmInfo m_CmInfos;
    bool m_CmInfosIsSet;
    UeReachability m_Reachability;
    bool m_ReachabilityIsSet;
    SubscribedData m_SubscribedData;
    bool m_SubscribedDataIsSet;
    CommunicationFailure m_CommFailure;
    bool m_CommFailureIsSet;
    int32_t m_NumberOfUes;
    bool m_NumberOfUesIsSet;
};

}
}
}
}

#endif /* AmfEventReport_H_ */

/**
* AMF Communicaiton Service
* AMF Communication Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "MmContext.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

MmContext::MmContext()
{
    m_NasSecurityModeIsSet = false;
    m_NasDownlinkCount = 0;
    m_NasDownlinkCountIsSet = false;
    m_NasUplinkCount = 0;
    m_NasUplinkCountIsSet = false;
    m__5gmmCapabilityIsSet = false;
    m_UeSecurityCapabilityIsSet = false;
    m_S1UeNetworkCapabilityIsSet = false;
    m_AllowedNssaiIsSet = false;
    m_NssaiMappingIsSet = false;
    m_NsInstancesIsSet = false;
    
}

MmContext::~MmContext()
{
}

void MmContext::validate()
{
    // TODO: implement validation
}

nlohmann::json MmContext::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["accessType"] = ModelBase::toJson(m_AccessType);
    if(m_NasSecurityModeIsSet)
    {
        val["nasSecurityMode"] = ModelBase::toJson(m_NasSecurityMode);
    }
    if(m_NasDownlinkCountIsSet)
    {
        val["nasDownlinkCount"] = m_NasDownlinkCount;
    }
    if(m_NasUplinkCountIsSet)
    {
        val["nasUplinkCount"] = m_NasUplinkCount;
    }
    if(m__5gmmCapabilityIsSet)
    {
        val["5gmmCapability"] = ModelBase::toJson(m__5gmmCapability);
    }
    if(m_UeSecurityCapabilityIsSet)
    {
        val["ueSecurityCapability"] = ModelBase::toJson(m_UeSecurityCapability);
    }
    if(m_S1UeNetworkCapabilityIsSet)
    {
        val["s1UeNetworkCapability"] = ModelBase::toJson(m_S1UeNetworkCapability);
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_AllowedNssai )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["allowedNssai"] = jsonArray;
        } 
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_NssaiMapping )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["nssaiMapping"] = jsonArray;
        } 
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_NsInstances )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["nsInstances"] = jsonArray;
        } 
    }
    

    return val;
}

void MmContext::fromJson(const nlohmann::json& val)
{
    if(val.find("nasSecurityMode") != val.end())
    {
        if(!val["nasSecurityMode"].is_null())
        {
            NasSecurityMode newItem;
            newItem.fromJson(val["nasSecurityMode"]);
            setNasSecurityMode( newItem );
        }
        
    }
    if(val.find("nasDownlinkCount") != val.end())
    {
        setNasDownlinkCount(val.at("nasDownlinkCount"));
    }
    if(val.find("nasUplinkCount") != val.end())
    {
        setNasUplinkCount(val.at("nasUplinkCount"));
    }
    if(val.find("5gmmCapability") != val.end())
    {
        set5gmmCapability(val.at("5gmmCapability"));
    }
    if(val.find("ueSecurityCapability") != val.end())
    {
        setUeSecurityCapability(val.at("ueSecurityCapability"));
    }
    if(val.find("s1UeNetworkCapability") != val.end())
    {
        setS1UeNetworkCapability(val.at("s1UeNetworkCapability"));
    }
    {
        m_AllowedNssai.clear();
        if(val.find("allowedNssai") != val.end())
        {
            for( auto& item : val["allowedNssai"] )
            {
                
                if(item.is_null())
                {
                    m_AllowedNssai.push_back( Snssai_2() );
                }
                else
                {
                    Snssai_2 newItem;
                    newItem.fromJson(item);
                    m_AllowedNssai.push_back( newItem );
                }
                
            }
        }
    }
    {
        m_NssaiMapping.clear();
        if(val.find("nssaiMapping") != val.end())
        {
            for( auto& item : val["nssaiMapping"] )
            {
                
                if(item.is_null())
                {
                    m_NssaiMapping.push_back( NssaiMapping() );
                }
                else
                {
                    NssaiMapping newItem;
                    newItem.fromJson(item);
                    m_NssaiMapping.push_back( newItem );
                }
                
            }
        }
    }
    {
        m_NsInstances.clear();
        if(val.find("nsInstances") != val.end())
        {
            for( auto& item : val["nsInstances"] )
            {
                m_NsInstances.push_back(item);
                
            }
        }
    }
    
}


AccessType MmContext::getAccessType() const
{
    return m_AccessType;
}
void MmContext::setAccessType(AccessType const& value)
{
    m_AccessType = value;
    
}
NasSecurityMode MmContext::getNasSecurityMode() const
{
    return m_NasSecurityMode;
}
void MmContext::setNasSecurityMode(NasSecurityMode const& value)
{
    m_NasSecurityMode = value;
    m_NasSecurityModeIsSet = true;
}
bool MmContext::nasSecurityModeIsSet() const
{
    return m_NasSecurityModeIsSet;
}
void MmContext::unsetNasSecurityMode()
{
    m_NasSecurityModeIsSet = false;
}
int32_t MmContext::getNasDownlinkCount() const
{
    return m_NasDownlinkCount;
}
void MmContext::setNasDownlinkCount(int32_t const value)
{
    m_NasDownlinkCount = value;
    m_NasDownlinkCountIsSet = true;
}
bool MmContext::nasDownlinkCountIsSet() const
{
    return m_NasDownlinkCountIsSet;
}
void MmContext::unsetNasDownlinkCount()
{
    m_NasDownlinkCountIsSet = false;
}
int32_t MmContext::getNasUplinkCount() const
{
    return m_NasUplinkCount;
}
void MmContext::setNasUplinkCount(int32_t const value)
{
    m_NasUplinkCount = value;
    m_NasUplinkCountIsSet = true;
}
bool MmContext::nasUplinkCountIsSet() const
{
    return m_NasUplinkCountIsSet;
}
void MmContext::unsetNasUplinkCount()
{
    m_NasUplinkCountIsSet = false;
}
std::string MmContext::get5gmmCapability() const
{
    return m__5gmmCapability;
}
void MmContext::set5gmmCapability(std::string const& value)
{
    m__5gmmCapability = value;
    m__5gmmCapabilityIsSet = true;
}
bool MmContext::_5gmmCapabilityIsSet() const
{
    return m__5gmmCapabilityIsSet;
}
void MmContext::unset_5gmmCapability()
{
    m__5gmmCapabilityIsSet = false;
}
std::string MmContext::getUeSecurityCapability() const
{
    return m_UeSecurityCapability;
}
void MmContext::setUeSecurityCapability(std::string const& value)
{
    m_UeSecurityCapability = value;
    m_UeSecurityCapabilityIsSet = true;
}
bool MmContext::ueSecurityCapabilityIsSet() const
{
    return m_UeSecurityCapabilityIsSet;
}
void MmContext::unsetUeSecurityCapability()
{
    m_UeSecurityCapabilityIsSet = false;
}
std::string MmContext::getS1UeNetworkCapability() const
{
    return m_S1UeNetworkCapability;
}
void MmContext::setS1UeNetworkCapability(std::string const& value)
{
    m_S1UeNetworkCapability = value;
    m_S1UeNetworkCapabilityIsSet = true;
}
bool MmContext::s1UeNetworkCapabilityIsSet() const
{
    return m_S1UeNetworkCapabilityIsSet;
}
void MmContext::unsetS1UeNetworkCapability()
{
    m_S1UeNetworkCapabilityIsSet = false;
}
std::vector<Snssai_2>& MmContext::getAllowedNssai()
{
    return m_AllowedNssai;
}
bool MmContext::allowedNssaiIsSet() const
{
    return m_AllowedNssaiIsSet;
}
void MmContext::unsetAllowedNssai()
{
    m_AllowedNssaiIsSet = false;
}
std::vector<NssaiMapping>& MmContext::getNssaiMapping()
{
    return m_NssaiMapping;
}
bool MmContext::nssaiMappingIsSet() const
{
    return m_NssaiMappingIsSet;
}
void MmContext::unsetNssaiMapping()
{
    m_NssaiMappingIsSet = false;
}
std::vector<std::string>& MmContext::getNsInstances()
{
    return m_NsInstances;
}
bool MmContext::nsInstancesIsSet() const
{
    return m_NsInstancesIsSet;
}
void MmContext::unsetNsInstances()
{
    m_NsInstancesIsSet = false;
}

}
}
}
}


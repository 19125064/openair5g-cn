/**
* Namf_EventExposure Service
* AMF Event Exposure Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AmfEventReport.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AmfEventReport::AmfEventReport()
{
    m_AnyUe = false;
    m_AnyUeIsSet = false;
    m_Supi = "";
    m_SupiIsSet = false;
    m_AreaIsSet = false;
    m_Gpsi = "";
    m_GpsiIsSet = false;
    m_Pei = "";
    m_PeiIsSet = false;
    m_LocationIsSet = false;
    m_Timezone = "";
    m_TimezoneIsSet = false;
    m_AccessTypesIsSet = false;
    m_RmInfosIsSet = false;
    m_CmInfosIsSet = false;
    m_ReachabilityIsSet = false;
    m_SubscribedDataIsSet = false;
    m_CommFailureIsSet = false;
    m_NumberOfUes = 0;
    m_NumberOfUesIsSet = false;
    
}

AmfEventReport::~AmfEventReport()
{
}

void AmfEventReport::validate()
{
    // TODO: implement validation
}

nlohmann::json AmfEventReport::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["type"] = ModelBase::toJson(m_Type);
    val["state"] = ModelBase::toJson(m_State);
    if(m_AnyUeIsSet)
    {
        val["anyUe"] = m_AnyUe;
    }
    if(m_SupiIsSet)
    {
        val["supi"] = ModelBase::toJson(m_Supi);
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Area )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["area"] = jsonArray;
        } 
    }
    if(m_GpsiIsSet)
    {
        val["gpsi"] = ModelBase::toJson(m_Gpsi);
    }
    if(m_PeiIsSet)
    {
        val["pei"] = ModelBase::toJson(m_Pei);
    }
    if(m_LocationIsSet)
    {
        val["location"] = ModelBase::toJson(m_Location);
    }
    if(m_TimezoneIsSet)
    {
        val["timezone"] = ModelBase::toJson(m_Timezone);
    }
    if(m_AccessTypesIsSet)
    {
        val["accessTypes"] = ModelBase::toJson(m_AccessTypes);
    }
    if(m_RmInfosIsSet)
    {
        val["rmInfos"] = ModelBase::toJson(m_RmInfos);
    }
    if(m_CmInfosIsSet)
    {
        val["cmInfos"] = ModelBase::toJson(m_CmInfos);
    }
    if(m_ReachabilityIsSet)
    {
        val["reachability"] = ModelBase::toJson(m_Reachability);
    }
    if(m_SubscribedDataIsSet)
    {
        val["subscribedData"] = ModelBase::toJson(m_SubscribedData);
    }
    if(m_CommFailureIsSet)
    {
        val["commFailure"] = ModelBase::toJson(m_CommFailure);
    }
    if(m_NumberOfUesIsSet)
    {
        val["numberOfUes"] = m_NumberOfUes;
    }
    

    return val;
}

void AmfEventReport::fromJson(const nlohmann::json& val)
{
    if(val.find("anyUe") != val.end())
    {
        setAnyUe(val.at("anyUe"));
    }
    if(val.find("supi") != val.end())
    {
        setSupi(val.at("supi"));
    }
    {
        m_Area.clear();
        if(val.find("area") != val.end())
        {
            for( auto& item : val["area"] )
            {
                
                if(item.is_null())
                {
                    m_Area.push_back( AmfEventArea() );
                }
                else
                {
                    AmfEventArea newItem;
                    newItem.fromJson(item);
                    m_Area.push_back( newItem );
                }
                
            }
        }
    }
    if(val.find("gpsi") != val.end())
    {
        setGpsi(val.at("gpsi"));
    }
    if(val.find("pei") != val.end())
    {
        setPei(val.at("pei"));
    }
    if(val.find("location") != val.end())
    {
        if(!val["location"].is_null())
        {
            UserLocation newItem;
            newItem.fromJson(val["location"]);
            setLocation( newItem );
        }
        
    }
    if(val.find("timezone") != val.end())
    {
        setTimezone(val.at("timezone"));
    }
    if(val.find("accessTypes") != val.end())
    {
        if(!val["accessTypes"].is_null())
        {
            AccessType newItem;
            newItem.fromJson(val["accessTypes"]);
            setAccessTypes( newItem );
        }
        
    }
    if(val.find("rmInfos") != val.end())
    {
        if(!val["rmInfos"].is_null())
        {
            RmInfo newItem;
            newItem.fromJson(val["rmInfos"]);
            setRmInfos( newItem );
        }
        
    }
    if(val.find("cmInfos") != val.end())
    {
        if(!val["cmInfos"].is_null())
        {
            CmInfo newItem;
            newItem.fromJson(val["cmInfos"]);
            setCmInfos( newItem );
        }
        
    }
    if(val.find("reachability") != val.end())
    {
        if(!val["reachability"].is_null())
        {
            UeReachability newItem;
            newItem.fromJson(val["reachability"]);
            setReachability( newItem );
        }
        
    }
    if(val.find("subscribedData") != val.end())
    {
        if(!val["subscribedData"].is_null())
        {
            SubscribedData newItem;
            newItem.fromJson(val["subscribedData"]);
            setSubscribedData( newItem );
        }
        
    }
    if(val.find("commFailure") != val.end())
    {
        if(!val["commFailure"].is_null())
        {
            CommunicationFailure newItem;
            newItem.fromJson(val["commFailure"]);
            setCommFailure( newItem );
        }
        
    }
    if(val.find("numberOfUes") != val.end())
    {
        setNumberOfUes(val.at("numberOfUes"));
    }
    
}


AmfEventType AmfEventReport::getType() const
{
    return m_Type;
}
void AmfEventReport::setType(AmfEventType const& value)
{
    m_Type = value;
    
}
AmfEventState AmfEventReport::getState() const
{
    return m_State;
}
void AmfEventReport::setState(AmfEventState const& value)
{
    m_State = value;
    
}
bool AmfEventReport::isAnyUe() const
{
    return m_AnyUe;
}
void AmfEventReport::setAnyUe(bool const value)
{
    m_AnyUe = value;
    m_AnyUeIsSet = true;
}
bool AmfEventReport::anyUeIsSet() const
{
    return m_AnyUeIsSet;
}
void AmfEventReport::unsetAnyUe()
{
    m_AnyUeIsSet = false;
}
std::string AmfEventReport::getSupi() const
{
    return m_Supi;
}
void AmfEventReport::setSupi(std::string const& value)
{
    m_Supi = value;
    m_SupiIsSet = true;
}
bool AmfEventReport::supiIsSet() const
{
    return m_SupiIsSet;
}
void AmfEventReport::unsetSupi()
{
    m_SupiIsSet = false;
}
std::vector<AmfEventArea>& AmfEventReport::getArea()
{
    return m_Area;
}
bool AmfEventReport::areaIsSet() const
{
    return m_AreaIsSet;
}
void AmfEventReport::unsetArea()
{
    m_AreaIsSet = false;
}
std::string AmfEventReport::getGpsi() const
{
    return m_Gpsi;
}
void AmfEventReport::setGpsi(std::string const& value)
{
    m_Gpsi = value;
    m_GpsiIsSet = true;
}
bool AmfEventReport::gpsiIsSet() const
{
    return m_GpsiIsSet;
}
void AmfEventReport::unsetGpsi()
{
    m_GpsiIsSet = false;
}
std::string AmfEventReport::getPei() const
{
    return m_Pei;
}
void AmfEventReport::setPei(std::string const& value)
{
    m_Pei = value;
    m_PeiIsSet = true;
}
bool AmfEventReport::peiIsSet() const
{
    return m_PeiIsSet;
}
void AmfEventReport::unsetPei()
{
    m_PeiIsSet = false;
}
UserLocation AmfEventReport::getLocation() const
{
    return m_Location;
}
void AmfEventReport::setLocation(UserLocation const& value)
{
    m_Location = value;
    m_LocationIsSet = true;
}
bool AmfEventReport::locationIsSet() const
{
    return m_LocationIsSet;
}
void AmfEventReport::unsetLocation()
{
    m_LocationIsSet = false;
}
std::string AmfEventReport::getTimezone() const
{
    return m_Timezone;
}
void AmfEventReport::setTimezone(std::string const& value)
{
    m_Timezone = value;
    m_TimezoneIsSet = true;
}
bool AmfEventReport::timezoneIsSet() const
{
    return m_TimezoneIsSet;
}
void AmfEventReport::unsetTimezone()
{
    m_TimezoneIsSet = false;
}
AccessType AmfEventReport::getAccessTypes() const
{
    return m_AccessTypes;
}
void AmfEventReport::setAccessTypes(AccessType const& value)
{
    m_AccessTypes = value;
    m_AccessTypesIsSet = true;
}
bool AmfEventReport::accessTypesIsSet() const
{
    return m_AccessTypesIsSet;
}
void AmfEventReport::unsetAccessTypes()
{
    m_AccessTypesIsSet = false;
}
RmInfo AmfEventReport::getRmInfos() const
{
    return m_RmInfos;
}
void AmfEventReport::setRmInfos(RmInfo const& value)
{
    m_RmInfos = value;
    m_RmInfosIsSet = true;
}
bool AmfEventReport::rmInfosIsSet() const
{
    return m_RmInfosIsSet;
}
void AmfEventReport::unsetRmInfos()
{
    m_RmInfosIsSet = false;
}
CmInfo AmfEventReport::getCmInfos() const
{
    return m_CmInfos;
}
void AmfEventReport::setCmInfos(CmInfo const& value)
{
    m_CmInfos = value;
    m_CmInfosIsSet = true;
}
bool AmfEventReport::cmInfosIsSet() const
{
    return m_CmInfosIsSet;
}
void AmfEventReport::unsetCmInfos()
{
    m_CmInfosIsSet = false;
}
UeReachability AmfEventReport::getReachability() const
{
    return m_Reachability;
}
void AmfEventReport::setReachability(UeReachability const& value)
{
    m_Reachability = value;
    m_ReachabilityIsSet = true;
}
bool AmfEventReport::reachabilityIsSet() const
{
    return m_ReachabilityIsSet;
}
void AmfEventReport::unsetReachability()
{
    m_ReachabilityIsSet = false;
}
SubscribedData AmfEventReport::getSubscribedData() const
{
    return m_SubscribedData;
}
void AmfEventReport::setSubscribedData(SubscribedData const& value)
{
    m_SubscribedData = value;
    m_SubscribedDataIsSet = true;
}
bool AmfEventReport::subscribedDataIsSet() const
{
    return m_SubscribedDataIsSet;
}
void AmfEventReport::unsetSubscribedData()
{
    m_SubscribedDataIsSet = false;
}
CommunicationFailure AmfEventReport::getCommFailure() const
{
    return m_CommFailure;
}
void AmfEventReport::setCommFailure(CommunicationFailure const& value)
{
    m_CommFailure = value;
    m_CommFailureIsSet = true;
}
bool AmfEventReport::commFailureIsSet() const
{
    return m_CommFailureIsSet;
}
void AmfEventReport::unsetCommFailure()
{
    m_CommFailureIsSet = false;
}
int32_t AmfEventReport::getNumberOfUes() const
{
    return m_NumberOfUes;
}
void AmfEventReport::setNumberOfUes(int32_t const value)
{
    m_NumberOfUes = value;
    m_NumberOfUesIsSet = true;
}
bool AmfEventReport::numberOfUesIsSet() const
{
    return m_NumberOfUesIsSet;
}
void AmfEventReport::unsetNumberOfUes()
{
    m_NumberOfUesIsSet = false;
}

}
}
}
}


/**
* AMF Location Service
* AMF Location Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ProvideUELocation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ProvideUELocation::ProvideUELocation()
{
    m_LocationEstimateIsSet = false;
    m_AccuracyFulfilmentIndicatorIsSet = false;
    m_AgeOfLocationEstimate = 0;
    m_AgeOfLocationEstimateIsSet = false;
    m_VelocityEstimateIsSet = false;
    m_PositioningDataIsSet = false;
    m_GnssPositioningDataIsSet = false;
    m_EcgiIsSet = false;
    m_NcgiIsSet = false;
    m_TargetServingNode = "";
    m_TargetServingNodeIsSet = false;
    m_CivicAddressIsSet = false;
    m_BarometricPressure = 0;
    m_BarometricPressureIsSet = false;
    m_SupportedFeatures = "";
    m_SupportedFeaturesIsSet = false;
    
}

ProvideUELocation::~ProvideUELocation()
{
}

void ProvideUELocation::validate()
{
    // TODO: implement validation
}

nlohmann::json ProvideUELocation::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_LocationEstimateIsSet)
    {
        val["locationEstimate"] = ModelBase::toJson(m_LocationEstimate);
    }
    if(m_AccuracyFulfilmentIndicatorIsSet)
    {
        val["accuracyFulfilmentIndicator"] = ModelBase::toJson(m_AccuracyFulfilmentIndicator);
    }
    if(m_AgeOfLocationEstimateIsSet)
    {
        val["ageOfLocationEstimate"] = m_AgeOfLocationEstimate;
    }
    if(m_VelocityEstimateIsSet)
    {
        val["velocityEstimate"] = ModelBase::toJson(m_VelocityEstimate);
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_PositioningData )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["positioningData"] = jsonArray;
        } 
    }
    if(m_GnssPositioningDataIsSet)
    {
        val["gnssPositioningData"] = ModelBase::toJson(m_GnssPositioningData);
    }
    if(m_EcgiIsSet)
    {
        val["ecgi"] = ModelBase::toJson(m_Ecgi);
    }
    if(m_NcgiIsSet)
    {
        val["ncgi"] = ModelBase::toJson(m_Ncgi);
    }
    if(m_TargetServingNodeIsSet)
    {
        val["targetServingNode"] = ModelBase::toJson(m_TargetServingNode);
    }
    if(m_CivicAddressIsSet)
    {
        val["civicAddress"] = ModelBase::toJson(m_CivicAddress);
    }
    if(m_BarometricPressureIsSet)
    {
        val["barometricPressure"] = m_BarometricPressure;
    }
    if(m_SupportedFeaturesIsSet)
    {
        val["supportedFeatures"] = ModelBase::toJson(m_SupportedFeatures);
    }
    

    return val;
}

void ProvideUELocation::fromJson(const nlohmann::json& val)
{
    if(val.find("locationEstimate") != val.end())
    {
        if(!val["locationEstimate"].is_null())
        {
            GeographicArea newItem;
            newItem.fromJson(val["locationEstimate"]);
            setLocationEstimate( newItem );
        }
        
    }
    if(val.find("accuracyFulfilmentIndicator") != val.end())
    {
        if(!val["accuracyFulfilmentIndicator"].is_null())
        {
            AccuracyFulfilmentIndicator newItem;
            newItem.fromJson(val["accuracyFulfilmentIndicator"]);
            setAccuracyFulfilmentIndicator( newItem );
        }
        
    }
    if(val.find("ageOfLocationEstimate") != val.end())
    {
        setAgeOfLocationEstimate(val.at("ageOfLocationEstimate"));
    }
    if(val.find("velocityEstimate") != val.end())
    {
        if(!val["velocityEstimate"].is_null())
        {
            VelocityEstimate newItem;
            newItem.fromJson(val["velocityEstimate"]);
            setVelocityEstimate( newItem );
        }
        
    }
    {
        m_PositioningData.clear();
        if(val.find("positioningData") != val.end())
        {
            for( auto& item : val["positioningData"] )
            {
                
                if(item.is_null())
                {
                    m_PositioningData.push_back( PositioningMethodAndUsage() );
                }
                else
                {
                    PositioningMethodAndUsage newItem;
                    newItem.fromJson(item);
                    m_PositioningData.push_back( newItem );
                }
                
            }
        }
    }
    if(val.find("gnssPositioningData") != val.end())
    {
        if(!val["gnssPositioningData"].is_null())
        {
            GnssPositioningMethodAndUsage newItem;
            newItem.fromJson(val["gnssPositioningData"]);
            setGnssPositioningData( newItem );
        }
        
    }
    if(val.find("ecgi") != val.end())
    {
        if(!val["ecgi"].is_null())
        {
            Ecgi newItem;
            newItem.fromJson(val["ecgi"]);
            setEcgi( newItem );
        }
        
    }
    if(val.find("ncgi") != val.end())
    {
        if(!val["ncgi"].is_null())
        {
            Ncgi newItem;
            newItem.fromJson(val["ncgi"]);
            setNcgi( newItem );
        }
        
    }
    if(val.find("targetServingNode") != val.end())
    {
        setTargetServingNode(val.at("targetServingNode"));
    }
    if(val.find("civicAddress") != val.end())
    {
        if(!val["civicAddress"].is_null())
        {
            CivicAddress newItem;
            newItem.fromJson(val["civicAddress"]);
            setCivicAddress( newItem );
        }
        
    }
    if(val.find("barometricPressure") != val.end())
    {
        setBarometricPressure(val.at("barometricPressure"));
    }
    if(val.find("supportedFeatures") != val.end())
    {
        setSupportedFeatures(val.at("supportedFeatures"));
    }
    
}


GeographicArea ProvideUELocation::getLocationEstimate() const
{
    return m_LocationEstimate;
}
void ProvideUELocation::setLocationEstimate(GeographicArea const& value)
{
    m_LocationEstimate = value;
    m_LocationEstimateIsSet = true;
}
bool ProvideUELocation::locationEstimateIsSet() const
{
    return m_LocationEstimateIsSet;
}
void ProvideUELocation::unsetLocationEstimate()
{
    m_LocationEstimateIsSet = false;
}
AccuracyFulfilmentIndicator ProvideUELocation::getAccuracyFulfilmentIndicator() const
{
    return m_AccuracyFulfilmentIndicator;
}
void ProvideUELocation::setAccuracyFulfilmentIndicator(AccuracyFulfilmentIndicator const& value)
{
    m_AccuracyFulfilmentIndicator = value;
    m_AccuracyFulfilmentIndicatorIsSet = true;
}
bool ProvideUELocation::accuracyFulfilmentIndicatorIsSet() const
{
    return m_AccuracyFulfilmentIndicatorIsSet;
}
void ProvideUELocation::unsetAccuracyFulfilmentIndicator()
{
    m_AccuracyFulfilmentIndicatorIsSet = false;
}
int32_t ProvideUELocation::getAgeOfLocationEstimate() const
{
    return m_AgeOfLocationEstimate;
}
void ProvideUELocation::setAgeOfLocationEstimate(int32_t const value)
{
    m_AgeOfLocationEstimate = value;
    m_AgeOfLocationEstimateIsSet = true;
}
bool ProvideUELocation::ageOfLocationEstimateIsSet() const
{
    return m_AgeOfLocationEstimateIsSet;
}
void ProvideUELocation::unsetAgeOfLocationEstimate()
{
    m_AgeOfLocationEstimateIsSet = false;
}
VelocityEstimate ProvideUELocation::getVelocityEstimate() const
{
    return m_VelocityEstimate;
}
void ProvideUELocation::setVelocityEstimate(VelocityEstimate const& value)
{
    m_VelocityEstimate = value;
    m_VelocityEstimateIsSet = true;
}
bool ProvideUELocation::velocityEstimateIsSet() const
{
    return m_VelocityEstimateIsSet;
}
void ProvideUELocation::unsetVelocityEstimate()
{
    m_VelocityEstimateIsSet = false;
}
std::vector<PositioningMethodAndUsage>& ProvideUELocation::getPositioningData()
{
    return m_PositioningData;
}
bool ProvideUELocation::positioningDataIsSet() const
{
    return m_PositioningDataIsSet;
}
void ProvideUELocation::unsetPositioningData()
{
    m_PositioningDataIsSet = false;
}
GnssPositioningMethodAndUsage ProvideUELocation::getGnssPositioningData() const
{
    return m_GnssPositioningData;
}
void ProvideUELocation::setGnssPositioningData(GnssPositioningMethodAndUsage const& value)
{
    m_GnssPositioningData = value;
    m_GnssPositioningDataIsSet = true;
}
bool ProvideUELocation::gnssPositioningDataIsSet() const
{
    return m_GnssPositioningDataIsSet;
}
void ProvideUELocation::unsetGnssPositioningData()
{
    m_GnssPositioningDataIsSet = false;
}
Ecgi ProvideUELocation::getEcgi() const
{
    return m_Ecgi;
}
void ProvideUELocation::setEcgi(Ecgi const& value)
{
    m_Ecgi = value;
    m_EcgiIsSet = true;
}
bool ProvideUELocation::ecgiIsSet() const
{
    return m_EcgiIsSet;
}
void ProvideUELocation::unsetEcgi()
{
    m_EcgiIsSet = false;
}
Ncgi ProvideUELocation::getNcgi() const
{
    return m_Ncgi;
}
void ProvideUELocation::setNcgi(Ncgi const& value)
{
    m_Ncgi = value;
    m_NcgiIsSet = true;
}
bool ProvideUELocation::ncgiIsSet() const
{
    return m_NcgiIsSet;
}
void ProvideUELocation::unsetNcgi()
{
    m_NcgiIsSet = false;
}
std::string ProvideUELocation::getTargetServingNode() const
{
    return m_TargetServingNode;
}
void ProvideUELocation::setTargetServingNode(std::string const& value)
{
    m_TargetServingNode = value;
    m_TargetServingNodeIsSet = true;
}
bool ProvideUELocation::targetServingNodeIsSet() const
{
    return m_TargetServingNodeIsSet;
}
void ProvideUELocation::unsetTargetServingNode()
{
    m_TargetServingNodeIsSet = false;
}
CivicAddress ProvideUELocation::getCivicAddress() const
{
    return m_CivicAddress;
}
void ProvideUELocation::setCivicAddress(CivicAddress const& value)
{
    m_CivicAddress = value;
    m_CivicAddressIsSet = true;
}
bool ProvideUELocation::civicAddressIsSet() const
{
    return m_CivicAddressIsSet;
}
void ProvideUELocation::unsetCivicAddress()
{
    m_CivicAddressIsSet = false;
}
int32_t ProvideUELocation::getBarometricPressure() const
{
    return m_BarometricPressure;
}
void ProvideUELocation::setBarometricPressure(int32_t const value)
{
    m_BarometricPressure = value;
    m_BarometricPressureIsSet = true;
}
bool ProvideUELocation::barometricPressureIsSet() const
{
    return m_BarometricPressureIsSet;
}
void ProvideUELocation::unsetBarometricPressure()
{
    m_BarometricPressureIsSet = false;
}
std::string ProvideUELocation::getSupportedFeatures() const
{
    return m_SupportedFeatures;
}
void ProvideUELocation::setSupportedFeatures(std::string const& value)
{
    m_SupportedFeatures = value;
    m_SupportedFeaturesIsSet = true;
}
bool ProvideUELocation::supportedFeaturesIsSet() const
{
    return m_SupportedFeaturesIsSet;
}
void ProvideUELocation::unsetSupportedFeatures()
{
    m_SupportedFeaturesIsSet = false;
}

}
}
}
}


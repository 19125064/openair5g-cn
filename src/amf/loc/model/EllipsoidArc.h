/**
* AMF Location Service
* AMF Location Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * EllipsoidArc.h
 *
 * 
 */

#ifndef EllipsoidArc_H_
#define EllipsoidArc_H_


#include "ModelBase.h"

#include "GeographicalCoordinates.h"
#include "GADShape.h"
#include "SupportedGADShapes.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  EllipsoidArc
    : public ModelBase
{
public:
    EllipsoidArc();
    virtual ~EllipsoidArc();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(const nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// EllipsoidArc members

    /// <summary>
    /// 
    /// </summary>
    SupportedGADShapes getShape() const;
    void setShape(SupportedGADShapes const& value);
        /// <summary>
    /// 
    /// </summary>
    GeographicalCoordinates getPoint() const;
    void setPoint(GeographicalCoordinates const& value);
        /// <summary>
    /// 
    /// </summary>
    int32_t getInnerRadius() const;
    void setInnerRadius(int32_t const value);
        /// <summary>
    /// 
    /// </summary>
    float getUncertaintyRadius() const;
    void setUncertaintyRadius(float const value);
        /// <summary>
    /// 
    /// </summary>
    int32_t getOffsetAngle() const;
    void setOffsetAngle(int32_t const value);
        /// <summary>
    /// 
    /// </summary>
    int32_t getIncludedAngle() const;
    void setIncludedAngle(int32_t const value);
        /// <summary>
    /// 
    /// </summary>
    int32_t getConfidence() const;
    void setConfidence(int32_t const value);
    
protected:
    SupportedGADShapes m_Shape;

    GeographicalCoordinates m_Point;

    int32_t m_InnerRadius;

    float m_UncertaintyRadius;

    int32_t m_OffsetAngle;

    int32_t m_IncludedAngle;

    int32_t m_Confidence;

};

}
}
}
}

#endif /* EllipsoidArc_H_ */

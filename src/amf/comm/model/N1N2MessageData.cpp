/**
* AMF Communicaiton Service
* AMF Communication Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "N1N2MessageData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

N1N2MessageData::N1N2MessageData()
{
    m_N1MessageContainerIsSet = false;
    m_N2InfoContainerIsSet = false;
    m_LastMsgIndication = false;
    m_LastMsgIndicationIsSet = false;
    m_SessionId = "";
    m_SessionIdIsSet = false;
    m_AnTypeIsSet = false;
    m_Ppi = 0;
    m_PpiIsSet = false;
    m_ArpIsSet = false;
    m__5qi = 0;
    m__5qiIsSet = false;
    m_N1n2FailureTxfNotifURI = "";
    m_N1n2FailureTxfNotifURIIsSet = false;
    m_SupportedFeatures = "";
    m_SupportedFeaturesIsSet = false;
    
}

N1N2MessageData::~N1N2MessageData()
{
}

void N1N2MessageData::validate()
{
    // TODO: implement validation
}

nlohmann::json N1N2MessageData::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_N1MessageContainerIsSet)
    {
        val["n1MessageContainer"] = ModelBase::toJson(m_N1MessageContainer);
    }
    if(m_N2InfoContainerIsSet)
    {
        val["n2InfoContainer"] = ModelBase::toJson(m_N2InfoContainer);
    }
    if(m_LastMsgIndicationIsSet)
    {
        val["lastMsgIndication"] = m_LastMsgIndication;
    }
    if(m_SessionIdIsSet)
    {
        val["sessionId"] = ModelBase::toJson(m_SessionId);
    }
    if(m_AnTypeIsSet)
    {
        val["anType"] = ModelBase::toJson(m_AnType);
    }
    if(m_PpiIsSet)
    {
        val["ppi"] = m_Ppi;
    }
    if(m_ArpIsSet)
    {
        val["arp"] = ModelBase::toJson(m_Arp);
    }
    if(m__5qiIsSet)
    {
        val["5qi"] = m__5qi;
    }
    if(m_N1n2FailureTxfNotifURIIsSet)
    {
        val["n1n2FailureTxfNotifURI"] = ModelBase::toJson(m_N1n2FailureTxfNotifURI);
    }
    if(m_SupportedFeaturesIsSet)
    {
        val["supportedFeatures"] = ModelBase::toJson(m_SupportedFeatures);
    }
    

    return val;
}

void N1N2MessageData::fromJson(const nlohmann::json& val)
{
    if(val.find("n1MessageContainer") != val.end())
    {
        if(!val["n1MessageContainer"].is_null())
        {
            N1MessageContainer newItem;
            newItem.fromJson(val["n1MessageContainer"]);
            setN1MessageContainer( newItem );
        }
        
    }
    if(val.find("n2InfoContainer") != val.end())
    {
        if(!val["n2InfoContainer"].is_null())
        {
            N2InfoContainer newItem;
            newItem.fromJson(val["n2InfoContainer"]);
            setN2InfoContainer( newItem );
        }
        
    }
    if(val.find("lastMsgIndication") != val.end())
    {
        setLastMsgIndication(val.at("lastMsgIndication"));
    }
    if(val.find("sessionId") != val.end())
    {
        setSessionId(val.at("sessionId"));
    }
    if(val.find("anType") != val.end())
    {
        if(!val["anType"].is_null())
        {
            AccessType newItem;
            newItem.fromJson(val["anType"]);
            setAnType( newItem );
        }
        
    }
    if(val.find("ppi") != val.end())
    {
        setPpi(val.at("ppi"));
    }
    if(val.find("arp") != val.end())
    {
        if(!val["arp"].is_null())
        {
            Arp newItem;
            newItem.fromJson(val["arp"]);
            setArp( newItem );
        }
        
    }
    if(val.find("5qi") != val.end())
    {
        set5qi(val.at("5qi"));
    }
    if(val.find("n1n2FailureTxfNotifURI") != val.end())
    {
        setN1n2FailureTxfNotifURI(val.at("n1n2FailureTxfNotifURI"));
    }
    if(val.find("supportedFeatures") != val.end())
    {
        setSupportedFeatures(val.at("supportedFeatures"));
    }
    
}


N1MessageContainer N1N2MessageData::getN1MessageContainer() const
{
    return m_N1MessageContainer;
}
void N1N2MessageData::setN1MessageContainer(N1MessageContainer const& value)
{
    m_N1MessageContainer = value;
    m_N1MessageContainerIsSet = true;
}
bool N1N2MessageData::n1MessageContainerIsSet() const
{
    return m_N1MessageContainerIsSet;
}
void N1N2MessageData::unsetN1MessageContainer()
{
    m_N1MessageContainerIsSet = false;
}
N2InfoContainer N1N2MessageData::getN2InfoContainer() const
{
    return m_N2InfoContainer;
}
void N1N2MessageData::setN2InfoContainer(N2InfoContainer const& value)
{
    m_N2InfoContainer = value;
    m_N2InfoContainerIsSet = true;
}
bool N1N2MessageData::n2InfoContainerIsSet() const
{
    return m_N2InfoContainerIsSet;
}
void N1N2MessageData::unsetN2InfoContainer()
{
    m_N2InfoContainerIsSet = false;
}
bool N1N2MessageData::isLastMsgIndication() const
{
    return m_LastMsgIndication;
}
void N1N2MessageData::setLastMsgIndication(bool const value)
{
    m_LastMsgIndication = value;
    m_LastMsgIndicationIsSet = true;
}
bool N1N2MessageData::lastMsgIndicationIsSet() const
{
    return m_LastMsgIndicationIsSet;
}
void N1N2MessageData::unsetLastMsgIndication()
{
    m_LastMsgIndicationIsSet = false;
}
std::string N1N2MessageData::getSessionId() const
{
    return m_SessionId;
}
void N1N2MessageData::setSessionId(std::string const& value)
{
    m_SessionId = value;
    m_SessionIdIsSet = true;
}
bool N1N2MessageData::sessionIdIsSet() const
{
    return m_SessionIdIsSet;
}
void N1N2MessageData::unsetSessionId()
{
    m_SessionIdIsSet = false;
}
AccessType N1N2MessageData::getAnType() const
{
    return m_AnType;
}
void N1N2MessageData::setAnType(AccessType const& value)
{
    m_AnType = value;
    m_AnTypeIsSet = true;
}
bool N1N2MessageData::anTypeIsSet() const
{
    return m_AnTypeIsSet;
}
void N1N2MessageData::unsetAnType()
{
    m_AnTypeIsSet = false;
}
int32_t N1N2MessageData::getPpi() const
{
    return m_Ppi;
}
void N1N2MessageData::setPpi(int32_t const value)
{
    m_Ppi = value;
    m_PpiIsSet = true;
}
bool N1N2MessageData::ppiIsSet() const
{
    return m_PpiIsSet;
}
void N1N2MessageData::unsetPpi()
{
    m_PpiIsSet = false;
}
Arp N1N2MessageData::getArp() const
{
    return m_Arp;
}
void N1N2MessageData::setArp(Arp const& value)
{
    m_Arp = value;
    m_ArpIsSet = true;
}
bool N1N2MessageData::arpIsSet() const
{
    return m_ArpIsSet;
}
void N1N2MessageData::unsetArp()
{
    m_ArpIsSet = false;
}
int32_t N1N2MessageData::get5qi() const
{
    return m__5qi;
}
void N1N2MessageData::set5qi(int32_t const value)
{
    m__5qi = value;
    m__5qiIsSet = true;
}
bool N1N2MessageData::_5qiIsSet() const
{
    return m__5qiIsSet;
}
void N1N2MessageData::unset_5qi()
{
    m__5qiIsSet = false;
}
std::string N1N2MessageData::getN1n2FailureTxfNotifURI() const
{
    return m_N1n2FailureTxfNotifURI;
}
void N1N2MessageData::setN1n2FailureTxfNotifURI(std::string const& value)
{
    m_N1n2FailureTxfNotifURI = value;
    m_N1n2FailureTxfNotifURIIsSet = true;
}
bool N1N2MessageData::n1n2FailureTxfNotifURIIsSet() const
{
    return m_N1n2FailureTxfNotifURIIsSet;
}
void N1N2MessageData::unsetN1n2FailureTxfNotifURI()
{
    m_N1n2FailureTxfNotifURIIsSet = false;
}
std::string N1N2MessageData::getSupportedFeatures() const
{
    return m_SupportedFeatures;
}
void N1N2MessageData::setSupportedFeatures(std::string const& value)
{
    m_SupportedFeatures = value;
    m_SupportedFeaturesIsSet = true;
}
bool N1N2MessageData::supportedFeaturesIsSet() const
{
    return m_SupportedFeaturesIsSet;
}
void N1N2MessageData::unsetSupportedFeatures()
{
    m_SupportedFeaturesIsSet = false;
}

}
}
}
}


/**
* AMF Communicaiton Service
* AMF Communication Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "UeContextCreatedData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UeContextCreatedData::UeContextCreatedData()
{
    m_NgapCause = 0;
    m_NgapCauseIsSet = false;
    m_FailedSessionsIsSet = false;
    m_SupportedFeatures = "";
    m_SupportedFeaturesIsSet = false;
    
}

UeContextCreatedData::~UeContextCreatedData()
{
}

void UeContextCreatedData::validate()
{
    // TODO: implement validation
}

nlohmann::json UeContextCreatedData::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["ueContext"] = ModelBase::toJson(m_UeContext);
    val["targetToSourceData"] = ModelBase::toJson(m_TargetToSourceData);
    {
        nlohmann::json jsonArray;
        for( auto& item : m_PduSessions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["pduSessions"] = jsonArray;
        
    }
    if(m_NgapCauseIsSet)
    {
        val["ngapCause"] = m_NgapCause;
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_FailedSessions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["failedSessions"] = jsonArray;
        } 
    }
    if(m_SupportedFeaturesIsSet)
    {
        val["supportedFeatures"] = ModelBase::toJson(m_SupportedFeatures);
    }
    

    return val;
}

void UeContextCreatedData::fromJson(const nlohmann::json& val)
{
    {
        m_PduSessions.clear();
                    for( auto& item : val["pduSessions"] )
            {
                
                if(item.is_null())
                {
                    m_PduSessions.push_back( N2SmInformation() );
                }
                else
                {
                    N2SmInformation newItem;
                    newItem.fromJson(item);
                    m_PduSessions.push_back( newItem );
                }
                
            }
    }
    if(val.find("ngapCause") != val.end())
    {
        setNgapCause(val.at("ngapCause"));
    }
    {
        m_FailedSessions.clear();
        if(val.find("failedSessions") != val.end())
        {
            for( auto& item : val["failedSessions"] )
            {
                m_FailedSessions.push_back(item);
                
            }
        }
    }
    if(val.find("supportedFeatures") != val.end())
    {
        setSupportedFeatures(val.at("supportedFeatures"));
    }
    
}


UeContext UeContextCreatedData::getUeContext() const
{
    return m_UeContext;
}
void UeContextCreatedData::setUeContext(UeContext const& value)
{
    m_UeContext = value;
    
}
N2InfoContainer UeContextCreatedData::getTargetToSourceData() const
{
    return m_TargetToSourceData;
}
void UeContextCreatedData::setTargetToSourceData(N2InfoContainer const& value)
{
    m_TargetToSourceData = value;
    
}
std::vector<N2SmInformation>& UeContextCreatedData::getPduSessions()
{
    return m_PduSessions;
}
int32_t UeContextCreatedData::getNgapCause() const
{
    return m_NgapCause;
}
void UeContextCreatedData::setNgapCause(int32_t const value)
{
    m_NgapCause = value;
    m_NgapCauseIsSet = true;
}
bool UeContextCreatedData::ngapCauseIsSet() const
{
    return m_NgapCauseIsSet;
}
void UeContextCreatedData::unsetNgapCause()
{
    m_NgapCauseIsSet = false;
}
std::vector<int32_t>& UeContextCreatedData::getFailedSessions()
{
    return m_FailedSessions;
}
bool UeContextCreatedData::failedSessionsIsSet() const
{
    return m_FailedSessionsIsSet;
}
void UeContextCreatedData::unsetFailedSessions()
{
    m_FailedSessionsIsSet = false;
}
std::string UeContextCreatedData::getSupportedFeatures() const
{
    return m_SupportedFeatures;
}
void UeContextCreatedData::setSupportedFeatures(std::string const& value)
{
    m_SupportedFeatures = value;
    m_SupportedFeaturesIsSet = true;
}
bool UeContextCreatedData::supportedFeaturesIsSet() const
{
    return m_SupportedFeaturesIsSet;
}
void UeContextCreatedData::unsetSupportedFeatures()
{
    m_SupportedFeaturesIsSet = false;
}

}
}
}
}


/**
* AMF Location Service
* AMF Location Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "NotifiedUELocation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

NotifiedUELocation::NotifiedUELocation()
{
    m_Supi = "";
    m_SupiIsSet = false;
    m_Gpsi = "";
    m_GpsiIsSet = false;
    m_Pei = "";
    m_PeiIsSet = false;
    m_LocationEstimateIsSet = false;
    m_AgeOfLocationEstimate = 0;
    m_AgeOfLocationEstimateIsSet = false;
    m_VelocityEstimateIsSet = false;
    m_PositioningDataIsSet = false;
    m_GnssPositioningDataIsSet = false;
    m_EcgiIsSet = false;
    m_NcgiIsSet = false;
    m_ServingNode = "";
    m_ServingNodeIsSet = false;
    m_CivicAddressIsSet = false;
    m_BarometricPressure = 0;
    m_BarometricPressureIsSet = false;
    
}

NotifiedUELocation::~NotifiedUELocation()
{
}

void NotifiedUELocation::validate()
{
    // TODO: implement validation
}

nlohmann::json NotifiedUELocation::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["locationEvent"] = ModelBase::toJson(m_LocationEvent);
    if(m_SupiIsSet)
    {
        val["supi"] = ModelBase::toJson(m_Supi);
    }
    if(m_GpsiIsSet)
    {
        val["gpsi"] = ModelBase::toJson(m_Gpsi);
    }
    if(m_PeiIsSet)
    {
        val["pei"] = ModelBase::toJson(m_Pei);
    }
    if(m_LocationEstimateIsSet)
    {
        val["locationEstimate"] = ModelBase::toJson(m_LocationEstimate);
    }
    if(m_AgeOfLocationEstimateIsSet)
    {
        val["ageOfLocationEstimate"] = m_AgeOfLocationEstimate;
    }
    if(m_VelocityEstimateIsSet)
    {
        val["velocityEstimate"] = ModelBase::toJson(m_VelocityEstimate);
    }
    if(m_PositioningDataIsSet)
    {
        val["positioningData"] = ModelBase::toJson(m_PositioningData);
    }
    if(m_GnssPositioningDataIsSet)
    {
        val["gnssPositioningData"] = ModelBase::toJson(m_GnssPositioningData);
    }
    if(m_EcgiIsSet)
    {
        val["ecgi"] = ModelBase::toJson(m_Ecgi);
    }
    if(m_NcgiIsSet)
    {
        val["ncgi"] = ModelBase::toJson(m_Ncgi);
    }
    if(m_ServingNodeIsSet)
    {
        val["servingNode"] = ModelBase::toJson(m_ServingNode);
    }
    if(m_CivicAddressIsSet)
    {
        val["civicAddress"] = ModelBase::toJson(m_CivicAddress);
    }
    if(m_BarometricPressureIsSet)
    {
        val["barometricPressure"] = m_BarometricPressure;
    }
    

    return val;
}

void NotifiedUELocation::fromJson(const nlohmann::json& val)
{
    if(val.find("supi") != val.end())
    {
        setSupi(val.at("supi"));
    }
    if(val.find("gpsi") != val.end())
    {
        setGpsi(val.at("gpsi"));
    }
    if(val.find("pei") != val.end())
    {
        setPei(val.at("pei"));
    }
    if(val.find("locationEstimate") != val.end())
    {
        if(!val["locationEstimate"].is_null())
        {
            GeographicArea newItem;
            newItem.fromJson(val["locationEstimate"]);
            setLocationEstimate( newItem );
        }
        
    }
    if(val.find("ageOfLocationEstimate") != val.end())
    {
        setAgeOfLocationEstimate(val.at("ageOfLocationEstimate"));
    }
    if(val.find("velocityEstimate") != val.end())
    {
        if(!val["velocityEstimate"].is_null())
        {
            VelocityEstimate newItem;
            newItem.fromJson(val["velocityEstimate"]);
            setVelocityEstimate( newItem );
        }
        
    }
    if(val.find("positioningData") != val.end())
    {
        if(!val["positioningData"].is_null())
        {
            PositioningMethodAndUsage newItem;
            newItem.fromJson(val["positioningData"]);
            setPositioningData( newItem );
        }
        
    }
    if(val.find("gnssPositioningData") != val.end())
    {
        if(!val["gnssPositioningData"].is_null())
        {
            GnssPositioningMethodAndUsage newItem;
            newItem.fromJson(val["gnssPositioningData"]);
            setGnssPositioningData( newItem );
        }
        
    }
    if(val.find("ecgi") != val.end())
    {
        if(!val["ecgi"].is_null())
        {
            Ecgi newItem;
            newItem.fromJson(val["ecgi"]);
            setEcgi( newItem );
        }
        
    }
    if(val.find("ncgi") != val.end())
    {
        if(!val["ncgi"].is_null())
        {
            Ncgi newItem;
            newItem.fromJson(val["ncgi"]);
            setNcgi( newItem );
        }
        
    }
    if(val.find("servingNode") != val.end())
    {
        setServingNode(val.at("servingNode"));
    }
    if(val.find("civicAddress") != val.end())
    {
        if(!val["civicAddress"].is_null())
        {
            CivicAddress newItem;
            newItem.fromJson(val["civicAddress"]);
            setCivicAddress( newItem );
        }
        
    }
    if(val.find("barometricPressure") != val.end())
    {
        setBarometricPressure(val.at("barometricPressure"));
    }
    
}


LocationEvent NotifiedUELocation::getLocationEvent() const
{
    return m_LocationEvent;
}
void NotifiedUELocation::setLocationEvent(LocationEvent const& value)
{
    m_LocationEvent = value;
    
}
std::string NotifiedUELocation::getSupi() const
{
    return m_Supi;
}
void NotifiedUELocation::setSupi(std::string const& value)
{
    m_Supi = value;
    m_SupiIsSet = true;
}
bool NotifiedUELocation::supiIsSet() const
{
    return m_SupiIsSet;
}
void NotifiedUELocation::unsetSupi()
{
    m_SupiIsSet = false;
}
std::string NotifiedUELocation::getGpsi() const
{
    return m_Gpsi;
}
void NotifiedUELocation::setGpsi(std::string const& value)
{
    m_Gpsi = value;
    m_GpsiIsSet = true;
}
bool NotifiedUELocation::gpsiIsSet() const
{
    return m_GpsiIsSet;
}
void NotifiedUELocation::unsetGpsi()
{
    m_GpsiIsSet = false;
}
std::string NotifiedUELocation::getPei() const
{
    return m_Pei;
}
void NotifiedUELocation::setPei(std::string const& value)
{
    m_Pei = value;
    m_PeiIsSet = true;
}
bool NotifiedUELocation::peiIsSet() const
{
    return m_PeiIsSet;
}
void NotifiedUELocation::unsetPei()
{
    m_PeiIsSet = false;
}
GeographicArea NotifiedUELocation::getLocationEstimate() const
{
    return m_LocationEstimate;
}
void NotifiedUELocation::setLocationEstimate(GeographicArea const& value)
{
    m_LocationEstimate = value;
    m_LocationEstimateIsSet = true;
}
bool NotifiedUELocation::locationEstimateIsSet() const
{
    return m_LocationEstimateIsSet;
}
void NotifiedUELocation::unsetLocationEstimate()
{
    m_LocationEstimateIsSet = false;
}
int32_t NotifiedUELocation::getAgeOfLocationEstimate() const
{
    return m_AgeOfLocationEstimate;
}
void NotifiedUELocation::setAgeOfLocationEstimate(int32_t const value)
{
    m_AgeOfLocationEstimate = value;
    m_AgeOfLocationEstimateIsSet = true;
}
bool NotifiedUELocation::ageOfLocationEstimateIsSet() const
{
    return m_AgeOfLocationEstimateIsSet;
}
void NotifiedUELocation::unsetAgeOfLocationEstimate()
{
    m_AgeOfLocationEstimateIsSet = false;
}
VelocityEstimate NotifiedUELocation::getVelocityEstimate() const
{
    return m_VelocityEstimate;
}
void NotifiedUELocation::setVelocityEstimate(VelocityEstimate const& value)
{
    m_VelocityEstimate = value;
    m_VelocityEstimateIsSet = true;
}
bool NotifiedUELocation::velocityEstimateIsSet() const
{
    return m_VelocityEstimateIsSet;
}
void NotifiedUELocation::unsetVelocityEstimate()
{
    m_VelocityEstimateIsSet = false;
}
PositioningMethodAndUsage NotifiedUELocation::getPositioningData() const
{
    return m_PositioningData;
}
void NotifiedUELocation::setPositioningData(PositioningMethodAndUsage const& value)
{
    m_PositioningData = value;
    m_PositioningDataIsSet = true;
}
bool NotifiedUELocation::positioningDataIsSet() const
{
    return m_PositioningDataIsSet;
}
void NotifiedUELocation::unsetPositioningData()
{
    m_PositioningDataIsSet = false;
}
GnssPositioningMethodAndUsage NotifiedUELocation::getGnssPositioningData() const
{
    return m_GnssPositioningData;
}
void NotifiedUELocation::setGnssPositioningData(GnssPositioningMethodAndUsage const& value)
{
    m_GnssPositioningData = value;
    m_GnssPositioningDataIsSet = true;
}
bool NotifiedUELocation::gnssPositioningDataIsSet() const
{
    return m_GnssPositioningDataIsSet;
}
void NotifiedUELocation::unsetGnssPositioningData()
{
    m_GnssPositioningDataIsSet = false;
}
Ecgi NotifiedUELocation::getEcgi() const
{
    return m_Ecgi;
}
void NotifiedUELocation::setEcgi(Ecgi const& value)
{
    m_Ecgi = value;
    m_EcgiIsSet = true;
}
bool NotifiedUELocation::ecgiIsSet() const
{
    return m_EcgiIsSet;
}
void NotifiedUELocation::unsetEcgi()
{
    m_EcgiIsSet = false;
}
Ncgi NotifiedUELocation::getNcgi() const
{
    return m_Ncgi;
}
void NotifiedUELocation::setNcgi(Ncgi const& value)
{
    m_Ncgi = value;
    m_NcgiIsSet = true;
}
bool NotifiedUELocation::ncgiIsSet() const
{
    return m_NcgiIsSet;
}
void NotifiedUELocation::unsetNcgi()
{
    m_NcgiIsSet = false;
}
std::string NotifiedUELocation::getServingNode() const
{
    return m_ServingNode;
}
void NotifiedUELocation::setServingNode(std::string const& value)
{
    m_ServingNode = value;
    m_ServingNodeIsSet = true;
}
bool NotifiedUELocation::servingNodeIsSet() const
{
    return m_ServingNodeIsSet;
}
void NotifiedUELocation::unsetServingNode()
{
    m_ServingNodeIsSet = false;
}
CivicAddress NotifiedUELocation::getCivicAddress() const
{
    return m_CivicAddress;
}
void NotifiedUELocation::setCivicAddress(CivicAddress const& value)
{
    m_CivicAddress = value;
    m_CivicAddressIsSet = true;
}
bool NotifiedUELocation::civicAddressIsSet() const
{
    return m_CivicAddressIsSet;
}
void NotifiedUELocation::unsetCivicAddress()
{
    m_CivicAddressIsSet = false;
}
int32_t NotifiedUELocation::getBarometricPressure() const
{
    return m_BarometricPressure;
}
void NotifiedUELocation::setBarometricPressure(int32_t const value)
{
    m_BarometricPressure = value;
    m_BarometricPressureIsSet = true;
}
bool NotifiedUELocation::barometricPressureIsSet() const
{
    return m_BarometricPressureIsSet;
}
void NotifiedUELocation::unsetBarometricPressure()
{
    m_BarometricPressureIsSet = false;
}

}
}
}
}


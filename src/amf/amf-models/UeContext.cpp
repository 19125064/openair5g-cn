/**
* AMF Communicaiton Service
* AMF Communication Service
*
* OpenAPI spec version: 1.R15.0.0
*
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "UeContext.h"
#include <iostream>

namespace org {
namespace openapitools {
namespace server {
namespace model {

UeContext::UeContext()
{
    m_Supi = "";
    m_SupiIsSet = false;
    m_SupiUnauthInd = false;
    m_SupiUnauthIndIsSet = false;
    m_GpsiIsSet = false;
    m_Pei = "";
    m_PeiIsSet = false;
    m_GroupsIsSet = false;
    m_DrxParameterIsSet = false;
    m_SubRfsp = 0;
    m_SubRfspIsSet = false;
    m_UsedRfsp = 0;
    m_UsedRfspIsSet = false;
    m_SmsfId = "";
    m_SmsfIdIsSet = false;
    m_SeafDataIsSet = false;
    m_PcfId = "";
    m_PcfIdIsSet = false;
    m_HpcfId = "";
    m_HpcfIdIsSet = false;
    m_EventSubscriptionsIsSet = false;
    m_MmContextsIsSet = false;
    m_SessionContextsIsSet = false;

}

UeContext::~UeContext()
{
}

void UeContext::validate()
{
    // TODO: implement validation
}

nlohmann::json UeContext::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_SupiIsSet)
    {
        val["supi"] = ModelBase::toJson(m_Supi);
    }
    if(m_SupiUnauthIndIsSet)
    {
        val["supiUnauthInd"] = m_SupiUnauthInd;
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Gpsi )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }

        if(jsonArray.size() > 0)
        {
            val["gpsi"] = jsonArray;
        }
    }
    if(m_PeiIsSet)
    {
        val["pei"] = ModelBase::toJson(m_Pei);
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Groups )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }

        if(jsonArray.size() > 0)
        {
            val["groups"] = jsonArray;
        }
    }
    if(m_DrxParameterIsSet)
    {
        val["drxParameter"] = ModelBase::toJson(m_DrxParameter);
    }
    if(m_SubRfspIsSet)
    {
        val["subRfsp"] = m_SubRfsp;
    }
    if(m_UsedRfspIsSet)
    {
        val["usedRfsp"] = m_UsedRfsp;
    }
    val["smsSupport"] = ModelBase::toJson(m_SmsSupport);
    if(m_SmsfIdIsSet)
    {
        val["smsfId"] = ModelBase::toJson(m_SmsfId);
    }
    if(m_SeafDataIsSet)
    {
        val["seafData"] = ModelBase::toJson(m_SeafData);
    }
    if(m_PcfIdIsSet)
    {
        val["pcfId"] = ModelBase::toJson(m_PcfId);
    }
    if(m_HpcfIdIsSet)
    {
        val["hpcfId"] = ModelBase::toJson(m_HpcfId);
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_EventSubscriptions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }

        if(jsonArray.size() > 0)
        {
            val["eventSubscriptions"] = jsonArray;
        }
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_MmContexts )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }

        if(jsonArray.size() > 0)
        {
            val["mmContexts"] = jsonArray;
        }
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_SessionContexts )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }

        if(jsonArray.size() > 0)
        {
            val["sessionContexts"] = jsonArray;
        }
    }


    return val;
}

void UeContext::fromJson(const nlohmann::json& val)
{
    if(val.find("supi") != val.end())
    {
        std::cout<<"\nFind supi\n";
        setSupi(val.at("supi"));
    }
    if(val.find("supiUnauthInd") != val.end())
    {
        setSupiUnauthInd(val.at("supiUnauthInd"));
    }
    {
        m_Gpsi.clear();
        if(val.find("gpsi") != val.end())
        {
            for( auto& item : val["gpsi"] )
            {
                m_Gpsi.push_back(item);

            }
        }
    }
    if(val.find("pei") != val.end())
    {
        setPei(val.at("pei"));
    }
    {
        m_Groups.clear();
        if(val.find("groups") != val.end())
        {
            for( auto& item : val["groups"] )
            {
                m_Groups.push_back(item);

            }
        }
    }
    if(val.find("drxParameter") != val.end())
    {
        setDrxParameter(val.at("drxParameter"));
    }
    if(val.find("subRfsp") != val.end())
    {
        setSubRfsp(val.at("subRfsp"));
    }
    if(val.find("usedRfsp") != val.end())
    {
        setUsedRfsp(val.at("usedRfsp"));
    }
    if(val.find("smsfId") != val.end())
    {
        setSmsfId(val.at("smsfId"));
    }
    if(val.find("seafData") != val.end())
    {
        if(!val["seafData"].is_null())
        {
            SeafData newItem;
            newItem.fromJson(val["seafData"]);
            setSeafData( newItem );
        }

    }
    if(val.find("pcfId") != val.end())
    {
        setPcfId(val.at("pcfId"));
    }
    if(val.find("hpcfId") != val.end())
    {
        setHpcfId(val.at("hpcfId"));
    }
    {
        m_EventSubscriptions.clear();
        if(val.find("eventSubscriptions") != val.end())
        {
            for( auto& item : val["eventSubscriptions"] )
            {

                if(item.is_null())
                {
                    m_EventSubscriptions.push_back( AmfEventSubscription() );
                }
                else
                {
                    AmfEventSubscription newItem;
                    newItem.fromJson(item);
                    m_EventSubscriptions.push_back( newItem );
                }

            }
        }
    }
    {
        m_MmContexts.clear();
        if(val.find("mmContexts") != val.end())
        {
            for( auto& item : val["mmContexts"] )
            {

                if(item.is_null())
                {
                    m_MmContexts.push_back( MmContext() );
                }
                else
                {
                    MmContext newItem;
                    newItem.fromJson(item);
                    m_MmContexts.push_back( newItem );
                }

            }
        }
    }
    {
        m_SessionContexts.clear();
        if(val.find("sessionContexts") != val.end())
        {
            for( auto& item : val["sessionContexts"] )
            {

                if(item.is_null())
                {
                    m_SessionContexts.push_back( PduSessionContext() );
                }
                else
                {
                    PduSessionContext newItem;
                    newItem.fromJson(item);
                    m_SessionContexts.push_back( newItem );
                }

            }
        }
    }

}


std::string UeContext::getSupi() const
{
    return m_Supi;
}
void UeContext::setSupi(std::string const& value)
{
    m_Supi = value;
    m_SupiIsSet = true;
}
bool UeContext::supiIsSet() const
{
    return m_SupiIsSet;
}
void UeContext::unsetSupi()
{
    m_SupiIsSet = false;
}
bool UeContext::isSupiUnauthInd() const
{
    return m_SupiUnauthInd;
}
void UeContext::setSupiUnauthInd(bool const value)
{
    m_SupiUnauthInd = value;
    m_SupiUnauthIndIsSet = true;
}
bool UeContext::supiUnauthIndIsSet() const
{
    return m_SupiUnauthIndIsSet;
}
void UeContext::unsetSupiUnauthInd()
{
    m_SupiUnauthIndIsSet = false;
}
std::vector<std::string>& UeContext::getGpsi()
{
    return m_Gpsi;
}
bool UeContext::gpsiIsSet() const
{
    return m_GpsiIsSet;
}
void UeContext::unsetGpsi()
{
    m_GpsiIsSet = false;
}
std::string UeContext::getPei() const
{
    return m_Pei;
}
void UeContext::setPei(std::string const& value)
{
    m_Pei = value;
    m_PeiIsSet = true;
}
bool UeContext::peiIsSet() const
{
    return m_PeiIsSet;
}
void UeContext::unsetPei()
{
    m_PeiIsSet = false;
}
std::vector<std::string>& UeContext::getGroups()
{
    return m_Groups;
}
bool UeContext::groupsIsSet() const
{
    return m_GroupsIsSet;
}
void UeContext::unsetGroups()
{
    m_GroupsIsSet = false;
}
std::string UeContext::getDrxParameter() const
{
    return m_DrxParameter;
}
void UeContext::setDrxParameter(std::string const& value)
{
    m_DrxParameter = value;
    m_DrxParameterIsSet = true;
}
bool UeContext::drxParameterIsSet() const
{
    return m_DrxParameterIsSet;
}
void UeContext::unsetDrxParameter()
{
    m_DrxParameterIsSet = false;
}
int32_t UeContext::getSubRfsp() const
{
    return m_SubRfsp;
}
void UeContext::setSubRfsp(int32_t const value)
{
    m_SubRfsp = value;
    m_SubRfspIsSet = true;
}
bool UeContext::subRfspIsSet() const
{
    return m_SubRfspIsSet;
}
void UeContext::unsetSubRfsp()
{
    m_SubRfspIsSet = false;
}
int32_t UeContext::getUsedRfsp() const
{
    return m_UsedRfsp;
}
void UeContext::setUsedRfsp(int32_t const value)
{
    m_UsedRfsp = value;
    m_UsedRfspIsSet = true;
}
bool UeContext::usedRfspIsSet() const
{
    return m_UsedRfspIsSet;
}
void UeContext::unsetUsedRfsp()
{
    m_UsedRfspIsSet = false;
}
SmsSupport UeContext::getSmsSupport() const
{
    return m_SmsSupport;
}
void UeContext::setSmsSupport(SmsSupport const& value)
{
    m_SmsSupport = value;

}
std::string UeContext::getSmsfId() const
{
    return m_SmsfId;
}
void UeContext::setSmsfId(std::string const& value)
{
    m_SmsfId = value;
    m_SmsfIdIsSet = true;
}
bool UeContext::smsfIdIsSet() const
{
    return m_SmsfIdIsSet;
}
void UeContext::unsetSmsfId()
{
    m_SmsfIdIsSet = false;
}
SeafData UeContext::getSeafData() const
{
    return m_SeafData;
}
void UeContext::setSeafData(SeafData const& value)
{
    m_SeafData = value;
    m_SeafDataIsSet = true;
}
bool UeContext::seafDataIsSet() const
{
    return m_SeafDataIsSet;
}
void UeContext::unsetSeafData()
{
    m_SeafDataIsSet = false;
}
std::string UeContext::getPcfId() const
{
    return m_PcfId;
}
void UeContext::setPcfId(std::string const& value)
{
    m_PcfId = value;
    m_PcfIdIsSet = true;
}
bool UeContext::pcfIdIsSet() const
{
    return m_PcfIdIsSet;
}
void UeContext::unsetPcfId()
{
    m_PcfIdIsSet = false;
}
std::string UeContext::getHpcfId() const
{
    return m_HpcfId;
}
void UeContext::setHpcfId(std::string const& value)
{
    m_HpcfId = value;
    m_HpcfIdIsSet = true;
}
bool UeContext::hpcfIdIsSet() const
{
    return m_HpcfIdIsSet;
}
void UeContext::unsetHpcfId()
{
    m_HpcfIdIsSet = false;
}
std::vector<AmfEventSubscription>& UeContext::getEventSubscriptions()
{
    return m_EventSubscriptions;
}
bool UeContext::eventSubscriptionsIsSet() const
{
    return m_EventSubscriptionsIsSet;
}
void UeContext::unsetEventSubscriptions()
{
    m_EventSubscriptionsIsSet = false;
}
std::vector<MmContext>& UeContext::getMmContexts()
{
    return m_MmContexts;
}
bool UeContext::mmContextsIsSet() const
{
    return m_MmContextsIsSet;
}
void UeContext::unsetMmContexts()
{
    m_MmContextsIsSet = false;
}
std::vector<PduSessionContext>& UeContext::getSessionContexts()
{
    return m_SessionContexts;
}
bool UeContext::sessionContextsIsSet() const
{
    return m_SessionContextsIsSet;
}
void UeContext::unsetSessionContexts()
{
    m_SessionContextsIsSet = false;
}

}
}
}
}


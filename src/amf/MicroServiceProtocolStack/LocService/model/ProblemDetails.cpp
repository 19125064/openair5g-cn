/**
* AMF Location Service
* AMF Location Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ProblemDetails.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ProblemDetails::ProblemDetails()
{
    m_Type = "";
    m_TypeIsSet = false;
    m_Title = "";
    m_TitleIsSet = false;
    m_Status = 0;
    m_StatusIsSet = false;
    m_Detail = "";
    m_DetailIsSet = false;
    m_Instance = "";
    m_InstanceIsSet = false;
    m_Cause = "";
    m_CauseIsSet = false;
    m_InvalidParamsIsSet = false;
    
}

ProblemDetails::~ProblemDetails()
{
}

void ProblemDetails::validate()
{
    // TODO: implement validation
}

nlohmann::json ProblemDetails::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_TypeIsSet)
    {
        val["type"] = ModelBase::toJson(m_Type);
    }
    if(m_TitleIsSet)
    {
        val["title"] = ModelBase::toJson(m_Title);
    }
    if(m_StatusIsSet)
    {
        val["status"] = m_Status;
    }
    if(m_DetailIsSet)
    {
        val["detail"] = ModelBase::toJson(m_Detail);
    }
    if(m_InstanceIsSet)
    {
        val["instance"] = ModelBase::toJson(m_Instance);
    }
    if(m_CauseIsSet)
    {
        val["cause"] = ModelBase::toJson(m_Cause);
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_InvalidParams )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["invalidParams"] = jsonArray;
        } 
    }
    

    return val;
}

void ProblemDetails::fromJson(const nlohmann::json& val)
{
    if(val.find("type") != val.end())
    {
        setType(val.at("type"));
    }
    if(val.find("title") != val.end())
    {
        setTitle(val.at("title"));
    }
    if(val.find("status") != val.end())
    {
        setStatus(val.at("status"));
    }
    if(val.find("detail") != val.end())
    {
        setDetail(val.at("detail"));
    }
    if(val.find("instance") != val.end())
    {
        setInstance(val.at("instance"));
    }
    if(val.find("cause") != val.end())
    {
        setCause(val.at("cause"));
    }
    {
        m_InvalidParams.clear();
        if(val.find("invalidParams") != val.end())
        {
            for( auto& item : val["invalidParams"] )
            {
                
                if(item.is_null())
                {
                    m_InvalidParams.push_back( InvalidParam() );
                }
                else
                {
                    InvalidParam newItem;
                    newItem.fromJson(item);
                    m_InvalidParams.push_back( newItem );
                }
                
            }
        }
    }
    
}


std::string ProblemDetails::getType() const
{
    return m_Type;
}
void ProblemDetails::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool ProblemDetails::typeIsSet() const
{
    return m_TypeIsSet;
}
void ProblemDetails::unsetType()
{
    m_TypeIsSet = false;
}
std::string ProblemDetails::getTitle() const
{
    return m_Title;
}
void ProblemDetails::setTitle(std::string const& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool ProblemDetails::titleIsSet() const
{
    return m_TitleIsSet;
}
void ProblemDetails::unsetTitle()
{
    m_TitleIsSet = false;
}
int32_t ProblemDetails::getStatus() const
{
    return m_Status;
}
void ProblemDetails::setStatus(int32_t const value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool ProblemDetails::statusIsSet() const
{
    return m_StatusIsSet;
}
void ProblemDetails::unsetStatus()
{
    m_StatusIsSet = false;
}
std::string ProblemDetails::getDetail() const
{
    return m_Detail;
}
void ProblemDetails::setDetail(std::string const& value)
{
    m_Detail = value;
    m_DetailIsSet = true;
}
bool ProblemDetails::detailIsSet() const
{
    return m_DetailIsSet;
}
void ProblemDetails::unsetDetail()
{
    m_DetailIsSet = false;
}
std::string ProblemDetails::getInstance() const
{
    return m_Instance;
}
void ProblemDetails::setInstance(std::string const& value)
{
    m_Instance = value;
    m_InstanceIsSet = true;
}
bool ProblemDetails::instanceIsSet() const
{
    return m_InstanceIsSet;
}
void ProblemDetails::unsetInstance()
{
    m_InstanceIsSet = false;
}
std::string ProblemDetails::getCause() const
{
    return m_Cause;
}
void ProblemDetails::setCause(std::string const& value)
{
    m_Cause = value;
    m_CauseIsSet = true;
}
bool ProblemDetails::causeIsSet() const
{
    return m_CauseIsSet;
}
void ProblemDetails::unsetCause()
{
    m_CauseIsSet = false;
}
std::vector<InvalidParam>& ProblemDetails::getInvalidParams()
{
    return m_InvalidParams;
}
bool ProblemDetails::invalidParamsIsSet() const
{
    return m_InvalidParamsIsSet;
}
void ProblemDetails::unsetInvalidParams()
{
    m_InvalidParamsIsSet = false;
}

}
}
}
}


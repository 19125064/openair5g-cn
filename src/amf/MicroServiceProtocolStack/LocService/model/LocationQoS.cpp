/**
* AMF Location Service
* AMF Location Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "LocationQoS.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

LocationQoS::LocationQoS()
{
    m_HAccuracy = 0.0f;
    m_HAccuracyIsSet = false;
    m_VAccuracy = 0.0f;
    m_VAccuracyIsSet = false;
    m_VerticalRequested = false;
    m_VerticalRequestedIsSet = false;
    m_ResponseTimeIsSet = false;
    
}

LocationQoS::~LocationQoS()
{
}

void LocationQoS::validate()
{
    // TODO: implement validation
}

nlohmann::json LocationQoS::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_HAccuracyIsSet)
    {
        val["hAccuracy"] = m_HAccuracy;
    }
    if(m_VAccuracyIsSet)
    {
        val["vAccuracy"] = m_VAccuracy;
    }
    if(m_VerticalRequestedIsSet)
    {
        val["verticalRequested"] = m_VerticalRequested;
    }
    if(m_ResponseTimeIsSet)
    {
        val["responseTime"] = ModelBase::toJson(m_ResponseTime);
    }
    

    return val;
}

void LocationQoS::fromJson(const nlohmann::json& val)
{
    if(val.find("hAccuracy") != val.end())
    {
        setHAccuracy(val.at("hAccuracy"));
    }
    if(val.find("vAccuracy") != val.end())
    {
        setVAccuracy(val.at("vAccuracy"));
    }
    if(val.find("verticalRequested") != val.end())
    {
        setVerticalRequested(val.at("verticalRequested"));
    }
    if(val.find("responseTime") != val.end())
    {
        if(!val["responseTime"].is_null())
        {
            ResponseTime newItem;
            newItem.fromJson(val["responseTime"]);
            setResponseTime( newItem );
        }
        
    }
    
}


float LocationQoS::getHAccuracy() const
{
    return m_HAccuracy;
}
void LocationQoS::setHAccuracy(float const value)
{
    m_HAccuracy = value;
    m_HAccuracyIsSet = true;
}
bool LocationQoS::hAccuracyIsSet() const
{
    return m_HAccuracyIsSet;
}
void LocationQoS::unsetHAccuracy()
{
    m_HAccuracyIsSet = false;
}
float LocationQoS::getVAccuracy() const
{
    return m_VAccuracy;
}
void LocationQoS::setVAccuracy(float const value)
{
    m_VAccuracy = value;
    m_VAccuracyIsSet = true;
}
bool LocationQoS::vAccuracyIsSet() const
{
    return m_VAccuracyIsSet;
}
void LocationQoS::unsetVAccuracy()
{
    m_VAccuracyIsSet = false;
}
bool LocationQoS::isVerticalRequested() const
{
    return m_VerticalRequested;
}
void LocationQoS::setVerticalRequested(bool const value)
{
    m_VerticalRequested = value;
    m_VerticalRequestedIsSet = true;
}
bool LocationQoS::verticalRequestedIsSet() const
{
    return m_VerticalRequestedIsSet;
}
void LocationQoS::unsetVerticalRequested()
{
    m_VerticalRequestedIsSet = false;
}
ResponseTime LocationQoS::getResponseTime() const
{
    return m_ResponseTime;
}
void LocationQoS::setResponseTime(ResponseTime const& value)
{
    m_ResponseTime = value;
    m_ResponseTimeIsSet = true;
}
bool LocationQoS::responseTimeIsSet() const
{
    return m_ResponseTimeIsSet;
}
void LocationQoS::unsetResponseTime()
{
    m_ResponseTimeIsSet = false;
}

}
}
}
}


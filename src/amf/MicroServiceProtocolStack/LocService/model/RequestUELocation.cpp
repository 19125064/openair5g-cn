/**
* AMF Location Service
* AMF Location Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RequestUELocation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RequestUELocation::RequestUELocation()
{
    m_Supi = "";
    m_SupiIsSet = false;
    m_Gpsi = "";
    m_GpsiIsSet = false;
    m_PriorityIsSet = false;
    m_LcsQoSIsSet = false;
    m_VelocityRequestedIsSet = false;
    m_LcsSupportedGADShapesIsSet = false;
    m_LocationNotificationUri = "";
    m_LocationNotificationUriIsSet = false;
    m_SupportedFeatures = "";
    m_SupportedFeaturesIsSet = false;
    
}

RequestUELocation::~RequestUELocation()
{
}

void RequestUELocation::validate()
{
    // TODO: implement validation
}

nlohmann::json RequestUELocation::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["lcsClientType"] = ModelBase::toJson(m_LcsClientType);
    val["lcsLocation"] = ModelBase::toJson(m_LcsLocation);
    if(m_SupiIsSet)
    {
        val["supi"] = ModelBase::toJson(m_Supi);
    }
    if(m_GpsiIsSet)
    {
        val["gpsi"] = ModelBase::toJson(m_Gpsi);
    }
    if(m_PriorityIsSet)
    {
        val["priority"] = ModelBase::toJson(m_Priority);
    }
    if(m_LcsQoSIsSet)
    {
        val["lcsQoS"] = ModelBase::toJson(m_LcsQoS);
    }
    if(m_VelocityRequestedIsSet)
    {
        val["velocityRequested"] = ModelBase::toJson(m_VelocityRequested);
    }
    if(m_LcsSupportedGADShapesIsSet)
    {
        val["lcsSupportedGADShapes"] = ModelBase::toJson(m_LcsSupportedGADShapes);
    }
    if(m_LocationNotificationUriIsSet)
    {
        val["locationNotificationUri"] = ModelBase::toJson(m_LocationNotificationUri);
    }
    if(m_SupportedFeaturesIsSet)
    {
        val["supportedFeatures"] = ModelBase::toJson(m_SupportedFeatures);
    }
    

    return val;
}

void RequestUELocation::fromJson(const nlohmann::json& val)
{
    if(val.find("supi") != val.end())
    {
        setSupi(val.at("supi"));
    }
    if(val.find("gpsi") != val.end())
    {
        setGpsi(val.at("gpsi"));
    }
    if(val.find("priority") != val.end())
    {
        if(!val["priority"].is_null())
        {
            LcsPriority newItem;
            newItem.fromJson(val["priority"]);
            setPriority( newItem );
        }
        
    }
    if(val.find("lcsQoS") != val.end())
    {
        if(!val["lcsQoS"].is_null())
        {
            LocationQoS newItem;
            newItem.fromJson(val["lcsQoS"]);
            setLcsQoS( newItem );
        }
        
    }
    if(val.find("velocityRequested") != val.end())
    {
        if(!val["velocityRequested"].is_null())
        {
            VelocityRequested newItem;
            newItem.fromJson(val["velocityRequested"]);
            setVelocityRequested( newItem );
        }
        
    }
    if(val.find("lcsSupportedGADShapes") != val.end())
    {
        if(!val["lcsSupportedGADShapes"].is_null())
        {
            SupportedGADShapes newItem;
            newItem.fromJson(val["lcsSupportedGADShapes"]);
            setLcsSupportedGADShapes( newItem );
        }
        
    }
    if(val.find("locationNotificationUri") != val.end())
    {
        setLocationNotificationUri(val.at("locationNotificationUri"));
    }
    if(val.find("supportedFeatures") != val.end())
    {
        setSupportedFeatures(val.at("supportedFeatures"));
    }
    
}


ExternalClientType RequestUELocation::getLcsClientType() const
{
    return m_LcsClientType;
}
void RequestUELocation::setLcsClientType(ExternalClientType const& value)
{
    m_LcsClientType = value;
    
}
LocationType RequestUELocation::getLcsLocation() const
{
    return m_LcsLocation;
}
void RequestUELocation::setLcsLocation(LocationType const& value)
{
    m_LcsLocation = value;
    
}
std::string RequestUELocation::getSupi() const
{
    return m_Supi;
}
void RequestUELocation::setSupi(std::string const& value)
{
    m_Supi = value;
    m_SupiIsSet = true;
}
bool RequestUELocation::supiIsSet() const
{
    return m_SupiIsSet;
}
void RequestUELocation::unsetSupi()
{
    m_SupiIsSet = false;
}
std::string RequestUELocation::getGpsi() const
{
    return m_Gpsi;
}
void RequestUELocation::setGpsi(std::string const& value)
{
    m_Gpsi = value;
    m_GpsiIsSet = true;
}
bool RequestUELocation::gpsiIsSet() const
{
    return m_GpsiIsSet;
}
void RequestUELocation::unsetGpsi()
{
    m_GpsiIsSet = false;
}
LcsPriority RequestUELocation::getPriority() const
{
    return m_Priority;
}
void RequestUELocation::setPriority(LcsPriority const& value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}
bool RequestUELocation::priorityIsSet() const
{
    return m_PriorityIsSet;
}
void RequestUELocation::unsetPriority()
{
    m_PriorityIsSet = false;
}
LocationQoS RequestUELocation::getLcsQoS() const
{
    return m_LcsQoS;
}
void RequestUELocation::setLcsQoS(LocationQoS const& value)
{
    m_LcsQoS = value;
    m_LcsQoSIsSet = true;
}
bool RequestUELocation::lcsQoSIsSet() const
{
    return m_LcsQoSIsSet;
}
void RequestUELocation::unsetLcsQoS()
{
    m_LcsQoSIsSet = false;
}
VelocityRequested RequestUELocation::getVelocityRequested() const
{
    return m_VelocityRequested;
}
void RequestUELocation::setVelocityRequested(VelocityRequested const& value)
{
    m_VelocityRequested = value;
    m_VelocityRequestedIsSet = true;
}
bool RequestUELocation::velocityRequestedIsSet() const
{
    return m_VelocityRequestedIsSet;
}
void RequestUELocation::unsetVelocityRequested()
{
    m_VelocityRequestedIsSet = false;
}
SupportedGADShapes RequestUELocation::getLcsSupportedGADShapes() const
{
    return m_LcsSupportedGADShapes;
}
void RequestUELocation::setLcsSupportedGADShapes(SupportedGADShapes const& value)
{
    m_LcsSupportedGADShapes = value;
    m_LcsSupportedGADShapesIsSet = true;
}
bool RequestUELocation::lcsSupportedGADShapesIsSet() const
{
    return m_LcsSupportedGADShapesIsSet;
}
void RequestUELocation::unsetLcsSupportedGADShapes()
{
    m_LcsSupportedGADShapesIsSet = false;
}
std::string RequestUELocation::getLocationNotificationUri() const
{
    return m_LocationNotificationUri;
}
void RequestUELocation::setLocationNotificationUri(std::string const& value)
{
    m_LocationNotificationUri = value;
    m_LocationNotificationUriIsSet = true;
}
bool RequestUELocation::locationNotificationUriIsSet() const
{
    return m_LocationNotificationUriIsSet;
}
void RequestUELocation::unsetLocationNotificationUri()
{
    m_LocationNotificationUriIsSet = false;
}
std::string RequestUELocation::getSupportedFeatures() const
{
    return m_SupportedFeatures;
}
void RequestUELocation::setSupportedFeatures(std::string const& value)
{
    m_SupportedFeatures = value;
    m_SupportedFeaturesIsSet = true;
}
bool RequestUELocation::supportedFeaturesIsSet() const
{
    return m_SupportedFeaturesIsSet;
}
void RequestUELocation::unsetSupportedFeatures()
{
    m_SupportedFeaturesIsSet = false;
}

}
}
}
}


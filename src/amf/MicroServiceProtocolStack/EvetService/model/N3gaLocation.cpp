/**
* Namf_EventExposure Service
* AMF Event Exposure Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "N3gaLocation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

N3gaLocation::N3gaLocation()
{
    m_N3gppTaiIsSet = false;
    m_N3IwfId = "";
    m_N3IwfIdIsSet = false;
    m_UeIpv4Addr = "";
    m_UeIpv4AddrIsSet = false;
    m_UeIpv6Addr = "";
    m_UeIpv6AddrIsSet = false;
    m_PortNumber = 0;
    m_PortNumberIsSet = false;
    
}

N3gaLocation::~N3gaLocation()
{
}

void N3gaLocation::validate()
{
    // TODO: implement validation
}

nlohmann::json N3gaLocation::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_N3gppTaiIsSet)
    {
        val["n3gppTai"] = ModelBase::toJson(m_N3gppTai);
    }
    if(m_N3IwfIdIsSet)
    {
        val["n3IwfId"] = ModelBase::toJson(m_N3IwfId);
    }
    if(m_UeIpv4AddrIsSet)
    {
        val["ueIpv4Addr"] = ModelBase::toJson(m_UeIpv4Addr);
    }
    if(m_UeIpv6AddrIsSet)
    {
        val["ueIpv6Addr"] = ModelBase::toJson(m_UeIpv6Addr);
    }
    if(m_PortNumberIsSet)
    {
        val["portNumber"] = m_PortNumber;
    }
    

    return val;
}

void N3gaLocation::fromJson(const nlohmann::json& val)
{
    if(val.find("n3gppTai") != val.end())
    {
        if(!val["n3gppTai"].is_null())
        {
            Tai newItem;
            newItem.fromJson(val["n3gppTai"]);
            setN3gppTai( newItem );
        }
        
    }
    if(val.find("n3IwfId") != val.end())
    {
        setN3IwfId(val.at("n3IwfId"));
    }
    if(val.find("ueIpv4Addr") != val.end())
    {
        setUeIpv4Addr(val.at("ueIpv4Addr"));
    }
    if(val.find("ueIpv6Addr") != val.end())
    {
        setUeIpv6Addr(val.at("ueIpv6Addr"));
    }
    if(val.find("portNumber") != val.end())
    {
        setPortNumber(val.at("portNumber"));
    }
    
}


Tai N3gaLocation::getN3gppTai() const
{
    return m_N3gppTai;
}
void N3gaLocation::setN3gppTai(Tai const& value)
{
    m_N3gppTai = value;
    m_N3gppTaiIsSet = true;
}
bool N3gaLocation::n3gppTaiIsSet() const
{
    return m_N3gppTaiIsSet;
}
void N3gaLocation::unsetN3gppTai()
{
    m_N3gppTaiIsSet = false;
}
std::string N3gaLocation::getN3IwfId() const
{
    return m_N3IwfId;
}
void N3gaLocation::setN3IwfId(std::string const& value)
{
    m_N3IwfId = value;
    m_N3IwfIdIsSet = true;
}
bool N3gaLocation::n3IwfIdIsSet() const
{
    return m_N3IwfIdIsSet;
}
void N3gaLocation::unsetN3IwfId()
{
    m_N3IwfIdIsSet = false;
}
std::string N3gaLocation::getUeIpv4Addr() const
{
    return m_UeIpv4Addr;
}
void N3gaLocation::setUeIpv4Addr(std::string const& value)
{
    m_UeIpv4Addr = value;
    m_UeIpv4AddrIsSet = true;
}
bool N3gaLocation::ueIpv4AddrIsSet() const
{
    return m_UeIpv4AddrIsSet;
}
void N3gaLocation::unsetUeIpv4Addr()
{
    m_UeIpv4AddrIsSet = false;
}
std::string N3gaLocation::getUeIpv6Addr() const
{
    return m_UeIpv6Addr;
}
void N3gaLocation::setUeIpv6Addr(std::string const& value)
{
    m_UeIpv6Addr = value;
    m_UeIpv6AddrIsSet = true;
}
bool N3gaLocation::ueIpv6AddrIsSet() const
{
    return m_UeIpv6AddrIsSet;
}
void N3gaLocation::unsetUeIpv6Addr()
{
    m_UeIpv6AddrIsSet = false;
}
int32_t N3gaLocation::getPortNumber() const
{
    return m_PortNumber;
}
void N3gaLocation::setPortNumber(int32_t const value)
{
    m_PortNumber = value;
    m_PortNumberIsSet = true;
}
bool N3gaLocation::portNumberIsSet() const
{
    return m_PortNumberIsSet;
}
void N3gaLocation::unsetPortNumber()
{
    m_PortNumberIsSet = false;
}

}
}
}
}


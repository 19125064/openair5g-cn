/**
* Namf_EventExposure Service
* AMF Event Exposure Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AmfEventState.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AmfEventState::AmfEventState()
{
    m_Active = false;
    m_RemainReports = 0;
    m_RemainReportsIsSet = false;
    m_RemainDuration = 0;
    m_RemainDurationIsSet = false;
    
}

AmfEventState::~AmfEventState()
{
}

void AmfEventState::validate()
{
    // TODO: implement validation
}

nlohmann::json AmfEventState::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["active"] = m_Active;
    if(m_RemainReportsIsSet)
    {
        val["remainReports"] = m_RemainReports;
    }
    if(m_RemainDurationIsSet)
    {
        val["remainDuration"] = m_RemainDuration;
    }
    

    return val;
}

void AmfEventState::fromJson(const nlohmann::json& val)
{
    setActive(val.at("active"));
    if(val.find("remainReports") != val.end())
    {
        setRemainReports(val.at("remainReports"));
    }
    if(val.find("remainDuration") != val.end())
    {
        setRemainDuration(val.at("remainDuration"));
    }
    
}


bool AmfEventState::isActive() const
{
    return m_Active;
}
void AmfEventState::setActive(bool const value)
{
    m_Active = value;
    
}
int32_t AmfEventState::getRemainReports() const
{
    return m_RemainReports;
}
void AmfEventState::setRemainReports(int32_t const value)
{
    m_RemainReports = value;
    m_RemainReportsIsSet = true;
}
bool AmfEventState::remainReportsIsSet() const
{
    return m_RemainReportsIsSet;
}
void AmfEventState::unsetRemainReports()
{
    m_RemainReportsIsSet = false;
}
int32_t AmfEventState::getRemainDuration() const
{
    return m_RemainDuration;
}
void AmfEventState::setRemainDuration(int32_t const value)
{
    m_RemainDuration = value;
    m_RemainDurationIsSet = true;
}
bool AmfEventState::remainDurationIsSet() const
{
    return m_RemainDurationIsSet;
}
void AmfEventState::unsetRemainDuration()
{
    m_RemainDurationIsSet = false;
}

}
}
}
}


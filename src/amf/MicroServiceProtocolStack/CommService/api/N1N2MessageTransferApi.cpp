/**
* AMF Communicaiton Service
* AMF Communication Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "N1N2MessageTransferApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

N1N2MessageTransferApi::N1N2MessageTransferApi(std::shared_ptr<Pistache::Rest::Router> rtr) { 
    router = rtr;
};

void N1N2MessageTransferApi::init() {
    setupRoutes();
}

void N1N2MessageTransferApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Post(*router, base + "/ue-contexts/:ueContextId/n1-n2-messages", Routes::bind(&N1N2MessageTransferApi::n1_n2_message_transfer_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&N1N2MessageTransferApi::n1_n2_message_transfer_api_default_handler, this));
}

void N1N2MessageTransferApi::n1_n2_message_transfer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto ueContextId = request.param(":ueContextId").as<std::string>();
    
    // Getting the body param
    
    N1N2MessageData n1N2MessageData;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
    
      n1N2MessageData.fromJson(request_body);
    
      this->n1_n2_message_transfer(ueContextId, n1N2MessageData, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void N1N2MessageTransferApi::n1_n2_message_transfer_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}


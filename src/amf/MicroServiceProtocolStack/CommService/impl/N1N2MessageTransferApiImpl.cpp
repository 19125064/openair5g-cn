/**
* AMF Communicaiton Service
* AMF Communication Service
*
* OpenAPI spec version: 1.R15.0.0
*
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "N1N2MessageTransferApiImpl.h"
#include "CreateUEContxtApiImpl.h"


extern std::unordered_map<std::string,org::openapitools::server::model::UeContext> RecordUEContext;

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

N1N2MessageTransferApiImpl::N1N2MessageTransferApiImpl(std::shared_ptr<Pistache::Rest::Router> rtr)
    : N1N2MessageTransferApi(rtr)
    { }

void N1N2MessageTransferApiImpl::n1_n2_message_transfer(const std::string &ueContextId, const N1N2MessageData &n1N2MessageData, Pistache::Http::ResponseWriter &response) {
    std::cout<<"ueContextId:"<<ueContextId<<"\nN1N2MessageData:"<<n1N2MessageData.toJson()<<std::endl;
    if(RecordUEContext.find(ueContextId)!=RecordUEContext.end())
    {

        //do the transferation
        //This represents the case where the AMF is able to
        //successfully transfer the N1/N2 message to the UE and
        //or the AN. The cause included in the response body
        //shall be "N1_N2_TRANSFER_INITIATED" in this case.

        //get the N1N2Message to Out of the n1N2MessageData

        response.send(Pistache::Http::Code::Accepted, "N1_N2_TRANSFER_INITIATED\n");
    }else
    {
        using std::string;
        string ResponseContent = "{\"cause\":\"CONTEXT_NOT_FOUND\"}";
        response.send(
                Pistache::Http::Code::Not_Found,
                ResponseContent,
                Pistache::Http::Mime::MediaType(Pistache::Http::Mime::Type::Application,Pistache::Http::Mime::Subtype::Json)
                );
    }
}

}
}
}
}


/**
* AMF Communicaiton Service
* AMF Communication Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "UeN1N2InfoSubscriptionCreateData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UeN1N2InfoSubscriptionCreateData::UeN1N2InfoSubscriptionCreateData()
{
    m_N2InformationClassIsSet = false;
    m_N2NotifyCallbackUri = "";
    m_N2NotifyCallbackUriIsSet = false;
    m_N1MessageClassIsSet = false;
    m_N1NotifyCallbackUri = "";
    m_N1NotifyCallbackUriIsSet = false;
    m_LmfId = "";
    m_LmfIdIsSet = false;
    m_SupportedFeatures = "";
    m_SupportedFeaturesIsSet = false;
    
}

UeN1N2InfoSubscriptionCreateData::~UeN1N2InfoSubscriptionCreateData()
{
}

void UeN1N2InfoSubscriptionCreateData::validate()
{
    // TODO: implement validation
}

nlohmann::json UeN1N2InfoSubscriptionCreateData::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_N2InformationClassIsSet)
    {
        val["n2InformationClass"] = ModelBase::toJson(m_N2InformationClass);
    }
    if(m_N2NotifyCallbackUriIsSet)
    {
        val["n2NotifyCallbackUri"] = ModelBase::toJson(m_N2NotifyCallbackUri);
    }
    if(m_N1MessageClassIsSet)
    {
        val["n1MessageClass"] = ModelBase::toJson(m_N1MessageClass);
    }
    if(m_N1NotifyCallbackUriIsSet)
    {
        val["n1NotifyCallbackUri"] = ModelBase::toJson(m_N1NotifyCallbackUri);
    }
    if(m_LmfIdIsSet)
    {
        val["lmfId"] = ModelBase::toJson(m_LmfId);
    }
    if(m_SupportedFeaturesIsSet)
    {
        val["supportedFeatures"] = ModelBase::toJson(m_SupportedFeatures);
    }
    

    return val;
}

void UeN1N2InfoSubscriptionCreateData::fromJson(const nlohmann::json& val)
{
    if(val.find("n2InformationClass") != val.end())
    {
        if(!val["n2InformationClass"].is_null())
        {
            N2InformationClass newItem;
            newItem.fromJson(val["n2InformationClass"]);
            setN2InformationClass( newItem );
        }
        
    }
    if(val.find("n2NotifyCallbackUri") != val.end())
    {
        setN2NotifyCallbackUri(val.at("n2NotifyCallbackUri"));
    }
    if(val.find("n1MessageClass") != val.end())
    {
        if(!val["n1MessageClass"].is_null())
        {
            N1MessageClass newItem;
            newItem.fromJson(val["n1MessageClass"]);
            setN1MessageClass( newItem );
        }
        
    }
    if(val.find("n1NotifyCallbackUri") != val.end())
    {
        setN1NotifyCallbackUri(val.at("n1NotifyCallbackUri"));
    }
    if(val.find("lmfId") != val.end())
    {
        setLmfId(val.at("lmfId"));
    }
    if(val.find("supportedFeatures") != val.end())
    {
        setSupportedFeatures(val.at("supportedFeatures"));
    }
    
}


N2InformationClass UeN1N2InfoSubscriptionCreateData::getN2InformationClass() const
{
    return m_N2InformationClass;
}
void UeN1N2InfoSubscriptionCreateData::setN2InformationClass(N2InformationClass const& value)
{
    m_N2InformationClass = value;
    m_N2InformationClassIsSet = true;
}
bool UeN1N2InfoSubscriptionCreateData::n2InformationClassIsSet() const
{
    return m_N2InformationClassIsSet;
}
void UeN1N2InfoSubscriptionCreateData::unsetN2InformationClass()
{
    m_N2InformationClassIsSet = false;
}
std::string UeN1N2InfoSubscriptionCreateData::getN2NotifyCallbackUri() const
{
    return m_N2NotifyCallbackUri;
}
void UeN1N2InfoSubscriptionCreateData::setN2NotifyCallbackUri(std::string const& value)
{
    m_N2NotifyCallbackUri = value;
    m_N2NotifyCallbackUriIsSet = true;
}
bool UeN1N2InfoSubscriptionCreateData::n2NotifyCallbackUriIsSet() const
{
    return m_N2NotifyCallbackUriIsSet;
}
void UeN1N2InfoSubscriptionCreateData::unsetN2NotifyCallbackUri()
{
    m_N2NotifyCallbackUriIsSet = false;
}
N1MessageClass UeN1N2InfoSubscriptionCreateData::getN1MessageClass() const
{
    return m_N1MessageClass;
}
void UeN1N2InfoSubscriptionCreateData::setN1MessageClass(N1MessageClass const& value)
{
    m_N1MessageClass = value;
    m_N1MessageClassIsSet = true;
}
bool UeN1N2InfoSubscriptionCreateData::n1MessageClassIsSet() const
{
    return m_N1MessageClassIsSet;
}
void UeN1N2InfoSubscriptionCreateData::unsetN1MessageClass()
{
    m_N1MessageClassIsSet = false;
}
std::string UeN1N2InfoSubscriptionCreateData::getN1NotifyCallbackUri() const
{
    return m_N1NotifyCallbackUri;
}
void UeN1N2InfoSubscriptionCreateData::setN1NotifyCallbackUri(std::string const& value)
{
    m_N1NotifyCallbackUri = value;
    m_N1NotifyCallbackUriIsSet = true;
}
bool UeN1N2InfoSubscriptionCreateData::n1NotifyCallbackUriIsSet() const
{
    return m_N1NotifyCallbackUriIsSet;
}
void UeN1N2InfoSubscriptionCreateData::unsetN1NotifyCallbackUri()
{
    m_N1NotifyCallbackUriIsSet = false;
}
std::string UeN1N2InfoSubscriptionCreateData::getLmfId() const
{
    return m_LmfId;
}
void UeN1N2InfoSubscriptionCreateData::setLmfId(std::string const& value)
{
    m_LmfId = value;
    m_LmfIdIsSet = true;
}
bool UeN1N2InfoSubscriptionCreateData::lmfIdIsSet() const
{
    return m_LmfIdIsSet;
}
void UeN1N2InfoSubscriptionCreateData::unsetLmfId()
{
    m_LmfIdIsSet = false;
}
std::string UeN1N2InfoSubscriptionCreateData::getSupportedFeatures() const
{
    return m_SupportedFeatures;
}
void UeN1N2InfoSubscriptionCreateData::setSupportedFeatures(std::string const& value)
{
    m_SupportedFeatures = value;
    m_SupportedFeaturesIsSet = true;
}
bool UeN1N2InfoSubscriptionCreateData::supportedFeaturesIsSet() const
{
    return m_SupportedFeaturesIsSet;
}
void UeN1N2InfoSubscriptionCreateData::unsetSupportedFeatures()
{
    m_SupportedFeaturesIsSet = false;
}

}
}
}
}


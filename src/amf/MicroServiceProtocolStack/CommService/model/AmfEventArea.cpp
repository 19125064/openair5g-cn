/**
* AMF Communicaiton Service
* AMF Communication Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AmfEventArea.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AmfEventArea::AmfEventArea()
{
    m_PresenceIsSet = false;
    m_TrackingAreasIsSet = false;
    m_AreaId = "";
    m_AreaIdIsSet = false;
    m_Ladn = "";
    m_LadnIsSet = false;
    m_EcgiIsSet = false;
    m_NcgiIsSet = false;
    m_GlobalRanNodeIdIsSet = false;
    
}

AmfEventArea::~AmfEventArea()
{
}

void AmfEventArea::validate()
{
    // TODO: implement validation
}

nlohmann::json AmfEventArea::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_PresenceIsSet)
    {
        val["presence"] = ModelBase::toJson(m_Presence);
    }
    if(m_TrackingAreasIsSet)
    {
        val["trackingAreas"] = ModelBase::toJson(m_TrackingAreas);
    }
    if(m_AreaIdIsSet)
    {
        val["areaId"] = ModelBase::toJson(m_AreaId);
    }
    if(m_LadnIsSet)
    {
        val["ladn"] = ModelBase::toJson(m_Ladn);
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Ecgi )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["ecgi"] = jsonArray;
        } 
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Ncgi )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["ncgi"] = jsonArray;
        } 
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_GlobalRanNodeId )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["globalRanNodeId"] = jsonArray;
        } 
    }
    

    return val;
}

void AmfEventArea::fromJson(const nlohmann::json& val)
{
    if(val.find("presence") != val.end())
    {
        if(!val["presence"].is_null())
        {
            PresenceState newItem;
            newItem.fromJson(val["presence"]);
            setPresence( newItem );
        }
        
    }
    if(val.find("trackingAreas") != val.end())
    {
        if(!val["trackingAreas"].is_null())
        {
            Tai_2 newItem;
            newItem.fromJson(val["trackingAreas"]);
            setTrackingAreas( newItem );
        }
        
    }
    if(val.find("areaId") != val.end())
    {
        setAreaId(val.at("areaId"));
    }
    if(val.find("ladn") != val.end())
    {
        setLadn(val.at("ladn"));
    }
    {
        m_Ecgi.clear();
        if(val.find("ecgi") != val.end())
        {
            for( auto& item : val["ecgi"] )
            {
                
                if(item.is_null())
                {
                    m_Ecgi.push_back( Ecgi_2() );
                }
                else
                {
                    Ecgi_2 newItem;
                    newItem.fromJson(item);
                    m_Ecgi.push_back( newItem );
                }
                
            }
        }
    }
    {
        m_Ncgi.clear();
        if(val.find("ncgi") != val.end())
        {
            for( auto& item : val["ncgi"] )
            {
                
                if(item.is_null())
                {
                    m_Ncgi.push_back( Ncgi_2() );
                }
                else
                {
                    Ncgi_2 newItem;
                    newItem.fromJson(item);
                    m_Ncgi.push_back( newItem );
                }
                
            }
        }
    }
    {
        m_GlobalRanNodeId.clear();
        if(val.find("globalRanNodeId") != val.end())
        {
            for( auto& item : val["globalRanNodeId"] )
            {
                
                if(item.is_null())
                {
                    m_GlobalRanNodeId.push_back( GlobalRanNodeId_2() );
                }
                else
                {
                    GlobalRanNodeId_2 newItem;
                    newItem.fromJson(item);
                    m_GlobalRanNodeId.push_back( newItem );
                }
                
            }
        }
    }
    
}


PresenceState AmfEventArea::getPresence() const
{
    return m_Presence;
}
void AmfEventArea::setPresence(PresenceState const& value)
{
    m_Presence = value;
    m_PresenceIsSet = true;
}
bool AmfEventArea::presenceIsSet() const
{
    return m_PresenceIsSet;
}
void AmfEventArea::unsetPresence()
{
    m_PresenceIsSet = false;
}
Tai_2 AmfEventArea::getTrackingAreas() const
{
    return m_TrackingAreas;
}
void AmfEventArea::setTrackingAreas(Tai_2 const& value)
{
    m_TrackingAreas = value;
    m_TrackingAreasIsSet = true;
}
bool AmfEventArea::trackingAreasIsSet() const
{
    return m_TrackingAreasIsSet;
}
void AmfEventArea::unsetTrackingAreas()
{
    m_TrackingAreasIsSet = false;
}
std::string AmfEventArea::getAreaId() const
{
    return m_AreaId;
}
void AmfEventArea::setAreaId(std::string const& value)
{
    m_AreaId = value;
    m_AreaIdIsSet = true;
}
bool AmfEventArea::areaIdIsSet() const
{
    return m_AreaIdIsSet;
}
void AmfEventArea::unsetAreaId()
{
    m_AreaIdIsSet = false;
}
std::string AmfEventArea::getLadn() const
{
    return m_Ladn;
}
void AmfEventArea::setLadn(std::string const& value)
{
    m_Ladn = value;
    m_LadnIsSet = true;
}
bool AmfEventArea::ladnIsSet() const
{
    return m_LadnIsSet;
}
void AmfEventArea::unsetLadn()
{
    m_LadnIsSet = false;
}
std::vector<Ecgi_2>& AmfEventArea::getEcgi()
{
    return m_Ecgi;
}
bool AmfEventArea::ecgiIsSet() const
{
    return m_EcgiIsSet;
}
void AmfEventArea::unsetEcgi()
{
    m_EcgiIsSet = false;
}
std::vector<Ncgi_2>& AmfEventArea::getNcgi()
{
    return m_Ncgi;
}
bool AmfEventArea::ncgiIsSet() const
{
    return m_NcgiIsSet;
}
void AmfEventArea::unsetNcgi()
{
    m_NcgiIsSet = false;
}
std::vector<GlobalRanNodeId_2>& AmfEventArea::getGlobalRanNodeId()
{
    return m_GlobalRanNodeId;
}
bool AmfEventArea::globalRanNodeIdIsSet() const
{
    return m_GlobalRanNodeIdIsSet;
}
void AmfEventArea::unsetGlobalRanNodeId()
{
    m_GlobalRanNodeIdIsSet = false;
}

}
}
}
}


/**
* AMF Communicaiton Service
* AMF Communication Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AmfEventArea.h
 *
 * 
 */

#ifndef AmfEventArea_H_
#define AmfEventArea_H_


#include "ModelBase.h"

#include "Ecgi_2.h"
#include "Ncgi_2.h"
#include <string>
#include "PresenceState.h"
#include "Tai_2.h"
#include "GlobalRanNodeId_2.h"
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AmfEventArea
    : public ModelBase
{
public:
    AmfEventArea();
    virtual ~AmfEventArea();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(const nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// AmfEventArea members

    /// <summary>
    /// 
    /// </summary>
    PresenceState getPresence() const;
    void setPresence(PresenceState const& value);
    bool presenceIsSet() const;
    void unsetPresence();
    /// <summary>
    /// 
    /// </summary>
    Tai_2 getTrackingAreas() const;
    void setTrackingAreas(Tai_2 const& value);
    bool trackingAreasIsSet() const;
    void unsetTrackingAreas();
    /// <summary>
    /// 
    /// </summary>
    std::string getAreaId() const;
    void setAreaId(std::string const& value);
    bool areaIdIsSet() const;
    void unsetAreaId();
    /// <summary>
    /// 
    /// </summary>
    std::string getLadn() const;
    void setLadn(std::string const& value);
    bool ladnIsSet() const;
    void unsetLadn();
    /// <summary>
    /// 
    /// </summary>
    std::vector<Ecgi_2>& getEcgi();
    bool ecgiIsSet() const;
    void unsetEcgi();
    /// <summary>
    /// 
    /// </summary>
    std::vector<Ncgi_2>& getNcgi();
    bool ncgiIsSet() const;
    void unsetNcgi();
    /// <summary>
    /// 
    /// </summary>
    std::vector<GlobalRanNodeId_2>& getGlobalRanNodeId();
    bool globalRanNodeIdIsSet() const;
    void unsetGlobalRanNodeId();

protected:
    PresenceState m_Presence;
    bool m_PresenceIsSet;
    Tai_2 m_TrackingAreas;
    bool m_TrackingAreasIsSet;
    std::string m_AreaId;
    bool m_AreaIdIsSet;
    std::string m_Ladn;
    bool m_LadnIsSet;
    std::vector<Ecgi_2> m_Ecgi;
    bool m_EcgiIsSet;
    std::vector<Ncgi_2> m_Ncgi;
    bool m_NcgiIsSet;
    std::vector<GlobalRanNodeId_2> m_GlobalRanNodeId;
    bool m_GlobalRanNodeIdIsSet;
};

}
}
}
}

#endif /* AmfEventArea_H_ */

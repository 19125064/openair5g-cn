/**
* AMF Communicaiton Service
* AMF Communication Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AmfEvent.h
 *
 * 
 */

#ifndef AmfEvent_H_
#define AmfEvent_H_


#include "ModelBase.h"

#include "LocationFilter.h"
#include "AmfEventArea.h"
#include "SubscribedDataFilter.h"
#include "AmfEventMode.h"
#include <vector>
#include "AmfEventType.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AmfEvent
    : public ModelBase
{
public:
    AmfEvent();
    virtual ~AmfEvent();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(const nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// AmfEvent members

    /// <summary>
    /// 
    /// </summary>
    AmfEventType getType() const;
    void setType(AmfEventType const& value);
        /// <summary>
    /// 
    /// </summary>
    AmfEventMode getOptions() const;
    void setOptions(AmfEventMode const& value);
        /// <summary>
    /// 
    /// </summary>
    bool isImmediateFlag() const;
    void setImmediateFlag(bool const value);
    bool immediateFlagIsSet() const;
    void unsetImmediateFlag();
    /// <summary>
    /// 
    /// </summary>
    std::vector<AmfEventArea>& getArea();
    bool areaIsSet() const;
    void unsetArea();
    /// <summary>
    /// 
    /// </summary>
    LocationFilter getLocationFilters() const;
    void setLocationFilters(LocationFilter const& value);
    bool locationFiltersIsSet() const;
    void unsetLocationFilters();
    /// <summary>
    /// 
    /// </summary>
    SubscribedDataFilter getSubscribedDataFilters() const;
    void setSubscribedDataFilters(SubscribedDataFilter const& value);
    bool subscribedDataFiltersIsSet() const;
    void unsetSubscribedDataFilters();

protected:
    AmfEventType m_Type;

    AmfEventMode m_Options;

    bool m_ImmediateFlag;
    bool m_ImmediateFlagIsSet;
    std::vector<AmfEventArea> m_Area;
    bool m_AreaIsSet;
    LocationFilter m_LocationFilters;
    bool m_LocationFiltersIsSet;
    SubscribedDataFilter m_SubscribedDataFilters;
    bool m_SubscribedDataFiltersIsSet;
};

}
}
}
}

#endif /* AmfEvent_H_ */

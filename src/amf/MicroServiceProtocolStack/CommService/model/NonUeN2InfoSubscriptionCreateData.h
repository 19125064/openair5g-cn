/**
* AMF Communicaiton Service
* AMF Communication Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * NonUeN2InfoSubscriptionCreateData.h
 *
 * 
 */

#ifndef NonUeN2InfoSubscriptionCreateData_H_
#define NonUeN2InfoSubscriptionCreateData_H_


#include "ModelBase.h"

#include "N2InformationClass.h"
#include <string>
#include "GlobalRanNodeId.h"
#include <vector>
#include "AccessType.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  NonUeN2InfoSubscriptionCreateData
    : public ModelBase
{
public:
    NonUeN2InfoSubscriptionCreateData();
    virtual ~NonUeN2InfoSubscriptionCreateData();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(const nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// NonUeN2InfoSubscriptionCreateData members

    /// <summary>
    /// 
    /// </summary>
    std::vector<GlobalRanNodeId>& getGlobalRanNodeId();
    bool globalRanNodeIdIsSet() const;
    void unsetGlobalRanNodeId();
    /// <summary>
    /// 
    /// </summary>
    std::vector<AccessType>& getAnType();
    bool anTypeIsSet() const;
    void unsetAnType();
    /// <summary>
    /// 
    /// </summary>
    N2InformationClass getN2InformationClass() const;
    void setN2InformationClass(N2InformationClass const& value);
        /// <summary>
    /// 
    /// </summary>
    std::string getN2NotifyCallbackUri() const;
    void setN2NotifyCallbackUri(std::string const& value);
        /// <summary>
    /// 
    /// </summary>
    std::string getLmfId() const;
    void setLmfId(std::string const& value);
    bool lmfIdIsSet() const;
    void unsetLmfId();
    /// <summary>
    /// 
    /// </summary>
    std::string getSupportedFeatures() const;
    void setSupportedFeatures(std::string const& value);
    bool supportedFeaturesIsSet() const;
    void unsetSupportedFeatures();

protected:
    std::vector<GlobalRanNodeId> m_GlobalRanNodeId;
    bool m_GlobalRanNodeIdIsSet;
    std::vector<AccessType> m_AnType;
    bool m_AnTypeIsSet;
    N2InformationClass m_N2InformationClass;

    std::string m_N2NotifyCallbackUri;

    std::string m_LmfId;
    bool m_LmfIdIsSet;
    std::string m_SupportedFeatures;
    bool m_SupportedFeaturesIsSet;
};

}
}
}
}

#endif /* NonUeN2InfoSubscriptionCreateData_H_ */

/**
* AMF Communicaiton Service
* AMF Communication Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AmfEvent.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AmfEvent::AmfEvent()
{
    m_ImmediateFlag = false;
    m_ImmediateFlagIsSet = false;
    m_AreaIsSet = false;
    m_LocationFiltersIsSet = false;
    m_SubscribedDataFiltersIsSet = false;
    
}

AmfEvent::~AmfEvent()
{
}

void AmfEvent::validate()
{
    // TODO: implement validation
}

nlohmann::json AmfEvent::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["type"] = ModelBase::toJson(m_Type);
    val["options"] = ModelBase::toJson(m_Options);
    if(m_ImmediateFlagIsSet)
    {
        val["immediateFlag"] = m_ImmediateFlag;
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Area )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["area"] = jsonArray;
        } 
    }
    if(m_LocationFiltersIsSet)
    {
        val["locationFilters"] = ModelBase::toJson(m_LocationFilters);
    }
    if(m_SubscribedDataFiltersIsSet)
    {
        val["subscribedDataFilters"] = ModelBase::toJson(m_SubscribedDataFilters);
    }
    

    return val;
}

void AmfEvent::fromJson(const nlohmann::json& val)
{
    if(val.find("immediateFlag") != val.end())
    {
        setImmediateFlag(val.at("immediateFlag"));
    }
    {
        m_Area.clear();
        if(val.find("area") != val.end())
        {
            for( auto& item : val["area"] )
            {
                
                if(item.is_null())
                {
                    m_Area.push_back( AmfEventArea() );
                }
                else
                {
                    AmfEventArea newItem;
                    newItem.fromJson(item);
                    m_Area.push_back( newItem );
                }
                
            }
        }
    }
    if(val.find("locationFilters") != val.end())
    {
        if(!val["locationFilters"].is_null())
        {
            LocationFilter newItem;
            newItem.fromJson(val["locationFilters"]);
            setLocationFilters( newItem );
        }
        
    }
    if(val.find("subscribedDataFilters") != val.end())
    {
        if(!val["subscribedDataFilters"].is_null())
        {
            SubscribedDataFilter newItem;
            newItem.fromJson(val["subscribedDataFilters"]);
            setSubscribedDataFilters( newItem );
        }
        
    }
    
}


AmfEventType AmfEvent::getType() const
{
    return m_Type;
}
void AmfEvent::setType(AmfEventType const& value)
{
    m_Type = value;
    
}
AmfEventMode AmfEvent::getOptions() const
{
    return m_Options;
}
void AmfEvent::setOptions(AmfEventMode const& value)
{
    m_Options = value;
    
}
bool AmfEvent::isImmediateFlag() const
{
    return m_ImmediateFlag;
}
void AmfEvent::setImmediateFlag(bool const value)
{
    m_ImmediateFlag = value;
    m_ImmediateFlagIsSet = true;
}
bool AmfEvent::immediateFlagIsSet() const
{
    return m_ImmediateFlagIsSet;
}
void AmfEvent::unsetImmediateFlag()
{
    m_ImmediateFlagIsSet = false;
}
std::vector<AmfEventArea>& AmfEvent::getArea()
{
    return m_Area;
}
bool AmfEvent::areaIsSet() const
{
    return m_AreaIsSet;
}
void AmfEvent::unsetArea()
{
    m_AreaIsSet = false;
}
LocationFilter AmfEvent::getLocationFilters() const
{
    return m_LocationFilters;
}
void AmfEvent::setLocationFilters(LocationFilter const& value)
{
    m_LocationFilters = value;
    m_LocationFiltersIsSet = true;
}
bool AmfEvent::locationFiltersIsSet() const
{
    return m_LocationFiltersIsSet;
}
void AmfEvent::unsetLocationFilters()
{
    m_LocationFiltersIsSet = false;
}
SubscribedDataFilter AmfEvent::getSubscribedDataFilters() const
{
    return m_SubscribedDataFilters;
}
void AmfEvent::setSubscribedDataFilters(SubscribedDataFilter const& value)
{
    m_SubscribedDataFilters = value;
    m_SubscribedDataFiltersIsSet = true;
}
bool AmfEvent::subscribedDataFiltersIsSet() const
{
    return m_SubscribedDataFiltersIsSet;
}
void AmfEvent::unsetSubscribedDataFilters()
{
    m_SubscribedDataFiltersIsSet = false;
}

}
}
}
}


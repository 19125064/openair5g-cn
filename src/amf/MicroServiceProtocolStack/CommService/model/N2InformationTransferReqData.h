/**
* AMF Communicaiton Service
* AMF Communication Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * N2InformationTransferReqData.h
 *
 * 
 */

#ifndef N2InformationTransferReqData_H_
#define N2InformationTransferReqData_H_


#include "ModelBase.h"

#include "Ecgi.h"
#include "Ncgi.h"
#include "Tai.h"
#include <string>
#include "N2InfoContainer.h"
#include "GlobalRanNodeId.h"
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  N2InformationTransferReqData
    : public ModelBase
{
public:
    N2InformationTransferReqData();
    virtual ~N2InformationTransferReqData();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(const nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// N2InformationTransferReqData members

    /// <summary>
    /// 
    /// </summary>
    Tai getTai() const;
    void setTai(Tai const& value);
    bool taiIsSet() const;
    void unsetTai();
    /// <summary>
    /// 
    /// </summary>
    Ecgi getEcgi() const;
    void setEcgi(Ecgi const& value);
    bool ecgiIsSet() const;
    void unsetEcgi();
    /// <summary>
    /// 
    /// </summary>
    Ncgi getNcgi() const;
    void setNcgi(Ncgi const& value);
    bool ncgiIsSet() const;
    void unsetNcgi();
    /// <summary>
    /// 
    /// </summary>
    std::vector<GlobalRanNodeId>& getGlobalRanNodeId();
    bool globalRanNodeIdIsSet() const;
    void unsetGlobalRanNodeId();
    /// <summary>
    /// 
    /// </summary>
    N2InfoContainer getN2Information() const;
    void setN2Information(N2InfoContainer const& value);
        /// <summary>
    /// 
    /// </summary>
    std::string getSupportedFeatures() const;
    void setSupportedFeatures(std::string const& value);
    bool supportedFeaturesIsSet() const;
    void unsetSupportedFeatures();

protected:
    Tai m_Tai;
    bool m_TaiIsSet;
    Ecgi m_Ecgi;
    bool m_EcgiIsSet;
    Ncgi m_Ncgi;
    bool m_NcgiIsSet;
    std::vector<GlobalRanNodeId> m_GlobalRanNodeId;
    bool m_GlobalRanNodeIdIsSet;
    N2InfoContainer m_N2Information;

    std::string m_SupportedFeatures;
    bool m_SupportedFeaturesIsSet;
};

}
}
}
}

#endif /* N2InformationTransferReqData_H_ */

/**
* AMF MT Service
* AMF Mobile Termination Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "ProvideDomainSelectionInfoApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

ProvideDomainSelectionInfoApi::ProvideDomainSelectionInfoApi(std::shared_ptr<Pistache::Rest::Router> rtr) { 
    router = rtr;
};

void ProvideDomainSelectionInfoApi::init() {
    setupRoutes();
}

void ProvideDomainSelectionInfoApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(*router, base + "/ue-contexts/:ueContextId", Routes::bind(&ProvideDomainSelectionInfoApi::provide_domain_selection_info_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&ProvideDomainSelectionInfoApi::provide_domain_selection_info_api_default_handler, this));
}

void ProvideDomainSelectionInfoApi::provide_domain_selection_info_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto ueContextId = request.param(":ueContextId").as<std::string>();
    
    // Getting the query params
    auto infoClassQuery = request.query().get("info-class");
    Pistache::Optional<UeContextInfoClass> infoClass;
    if(!infoClassQuery.isEmpty()){
        UeContextInfoClass value;
        //if(fromStringValue(infoClassQuery.get(), value)){
        //    infoClass = Pistache::Some(value);
        //}
    }
    auto supportedFeaturesQuery = request.query().get("supported-features");
    Pistache::Optional<std::string> supportedFeatures;
    if(!supportedFeaturesQuery.isEmpty()){
        std::string value;
        if(fromStringValue(supportedFeaturesQuery.get(), value)){
            supportedFeatures = Pistache::Some(value);
        }
    }
    
    try {
      this->provide_domain_selection_info(ueContextId, infoClass, supportedFeatures, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void ProvideDomainSelectionInfoApi::provide_domain_selection_info_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}


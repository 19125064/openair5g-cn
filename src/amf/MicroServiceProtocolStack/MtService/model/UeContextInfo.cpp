/**
* AMF MT Service
* AMF Mobile Termination Service
*
* OpenAPI spec version: 1.R15.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "UeContextInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UeContextInfo::UeContextInfo()
{
    m_SupportVoPS = false;
    m_SupportVoPSIsSet = false;
    m_LastActTime = "";
    m_LastActTimeIsSet = false;
    m_RatTypeIsSet = false;
    m_SupportedFeatures = "";
    m_SupportedFeaturesIsSet = false;
    
}

UeContextInfo::~UeContextInfo()
{
}

void UeContextInfo::validate()
{
    // TODO: implement validation
}

nlohmann::json UeContextInfo::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_SupportVoPSIsSet)
    {
        val["supportVoPS"] = m_SupportVoPS;
    }
    if(m_LastActTimeIsSet)
    {
        val["lastActTime"] = ModelBase::toJson(m_LastActTime);
    }
    if(m_RatTypeIsSet)
    {
        val["ratType"] = ModelBase::toJson(m_RatType);
    }
    if(m_SupportedFeaturesIsSet)
    {
        val["supportedFeatures"] = ModelBase::toJson(m_SupportedFeatures);
    }
    

    return val;
}

void UeContextInfo::fromJson(const nlohmann::json& val)
{
    if(val.find("supportVoPS") != val.end())
    {
        setSupportVoPS(val.at("supportVoPS"));
    }
    if(val.find("lastActTime") != val.end())
    {
        setLastActTime(val.at("lastActTime"));
        
    }
    if(val.find("ratType") != val.end())
    {
        if(!val["ratType"].is_null())
        {
            RatType newItem;
            newItem.fromJson(val["ratType"]);
            setRatType( newItem );
        }
        
    }
    if(val.find("supportedFeatures") != val.end())
    {
        setSupportedFeatures(val.at("supportedFeatures"));
    }
    
}


bool UeContextInfo::isSupportVoPS() const
{
    return m_SupportVoPS;
}
void UeContextInfo::setSupportVoPS(bool const value)
{
    m_SupportVoPS = value;
    m_SupportVoPSIsSet = true;
}
bool UeContextInfo::supportVoPSIsSet() const
{
    return m_SupportVoPSIsSet;
}
void UeContextInfo::unsetSupportVoPS()
{
    m_SupportVoPSIsSet = false;
}
std::string UeContextInfo::getLastActTime() const
{
    return m_LastActTime;
}
void UeContextInfo::setLastActTime(std::string const& value)
{
    m_LastActTime = value;
    m_LastActTimeIsSet = true;
}
bool UeContextInfo::lastActTimeIsSet() const
{
    return m_LastActTimeIsSet;
}
void UeContextInfo::unsetLastActTime()
{
    m_LastActTimeIsSet = false;
}
RatType UeContextInfo::getRatType() const
{
    return m_RatType;
}
void UeContextInfo::setRatType(RatType const& value)
{
    m_RatType = value;
    m_RatTypeIsSet = true;
}
bool UeContextInfo::ratTypeIsSet() const
{
    return m_RatTypeIsSet;
}
void UeContextInfo::unsetRatType()
{
    m_RatTypeIsSet = false;
}
std::string UeContextInfo::getSupportedFeatures() const
{
    return m_SupportedFeatures;
}
void UeContextInfo::setSupportedFeatures(std::string const& value)
{
    m_SupportedFeatures = value;
    m_SupportedFeaturesIsSet = true;
}
bool UeContextInfo::supportedFeaturesIsSet() const
{
    return m_SupportedFeaturesIsSet;
}
void UeContextInfo::unsetSupportedFeatures()
{
    m_SupportedFeaturesIsSet = false;
}

}
}
}
}

